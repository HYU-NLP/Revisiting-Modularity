{"problem_id":50,"problem_description":"Karlsson has recently discovered a huge stock of berry jam jars in the basement of the house. More specifically, there were $2n$ jars of strawberry and blueberry jam.\n\nAll the $2n$ jars are arranged in a row. The stairs to the basement are exactly in the middle of that row. So when Karlsson enters the basement, he sees exactly $n$ jars to his left and $n$ jars to his right.\n\nFor example, the basement might look like this: [Image] \n\nBeing the starightforward man he is, he immediately starts eating the jam. In one minute he chooses to empty either the first non-empty jar to his left or the first non-empty jar to his right.\n\nFinally, Karlsson decided that at the end the amount of full strawberry and blueberry jam jars should become the same.\n\nFor example, this might be the result: [Image] He has eaten $1$ jar to his left and then $5$ jars to his right. There remained exactly $3$ full jars of both strawberry and blueberry jam. \n\nJars are numbered from $1$ to $2n$ from left to right, so Karlsson initially stands between jars $n$ and $n+1$.\n\nWhat is the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left?\n\nYour program should answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$).\n\nThe second line of each test case contains $2n$ integers $a_1, a_2, \\dots, a_{2n}$ ($1 \\le a_i \\le 2$) \u2014 $a_i=1$ means that the $i$-th jar from the left is a strawberry jam jar and $a_i=2$ means that it is a blueberry jam jar.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print the answer to it \u2014 the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left.\n\n\n-----Example-----\nInput\n4\n6\n1 1 1 2 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 1 1\n\nOutput\n6\n0\n6\n2\n\n\n\n-----Note-----\n\nThe picture from the statement describes the first test case.\n\nIn the second test case the number of strawberry and blueberry jam jars is already equal.\n\nIn the third test case Karlsson is required to eat all $6$ jars so that there remain $0$ jars of both jams.\n\nIn the fourth test case Karlsson can empty either the second and the third jars or the third and the fourth one. The both scenarios will leave $1$ jar of both jams.","starter_code":"","sc_instruction":"Write a python code to solve the following coding problem that obeys the constraints and passes the example test cases. The output code needs to read from and write to standard IO. Please wrap your code answer using ```:","mc_instruction":"Write a python code to solve the following coding problem that obeys the constraints and passes the example test cases. The output code needs to read from and write to standard IO. Ensure modularity of the python code by dividing the code into smaller, useful functions to solve the given problem. Please wrap your code answer using ```:","sc":"for tcase in range(int(input())):\n    n=int(input())\n    ls = list(map(int, input().split()))\n    oneneed = 2*(n - ls.count(1))\n    ldct = {0:0}\n    ctr = 0\n    eaten = 0\n    for i in range(n-1,-1,-1):\n        eaten += 1\n        ctr += (1 if ls[i] == 2 else -1)\n        if ctr not in ldct:\n            ldct[ctr] = eaten\n\n    rdct = {0:0}\n    ctr = 0\n    eaten = 0\n    for i in range(n,2*n):\n        eaten += 1\n        ctr += (1 if ls[i] == 2 else -1)\n        if ctr not in rdct:\n            rdct[ctr] = eaten\n    \n\n    best=99**99\n    for k in list(rdct.keys()):\n        otk = oneneed - k\n        if otk in ldct:\n            best = min(best, rdct[k]+ldct[otk])\n    print(best)","sc_cc":10.0,"mc":"import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int,minp().split()))\n\ndef solve():\n\tn = mint()\n\ta = list(mints())\n\tc = dict()\n\tc[0] = 2*n\n\td = 0\n\t\n\tfor i in range(2*n-1,n-1,-1):\n\t\tif a[i] == 1:\n\t\t\td += 1\n\t\telse:\n\t\t\td -= 1\n\t\t\n\t\tc[d] = i\n\t\n\td = 0\n\tr = 2*n\n\tr = min(r, n + c[0] - n)\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\td += 1\n\t\telse:\n\t\t\td -= 1\n\t\t\n\t\tif (-d) in c:\n\t\t\tr = min(r, n - i - 1 + c[-d] - n)\n\t\n\treturn r\n\n\nfor i in range(mint()):\n\tprint(solve())","mc_cc":2.2,"transformed_mc":["\ndef find_jars_to_empty(t, test_cases):\n    result = []\n    for i in range(t):\n        n = test_cases[i][0]\n        ls = test_cases[i][1]\n        oneneed = 2 * (n - ls.count(1))\n        ldct, rdct = get_counts(n, ls)\n        best = find_min_jars(ldct, rdct, oneneed)\n        result.append(best)\n    return result\n\ndef get_counts(n, ls):\n    ldct = {0: 0}\n    rdct = {0: 0}\n    ctr = 0\n    eaten = 0\n    for i in range(n-1, -1, -1):\n        eaten += 1\n        ctr += (1 if ls[i] == 2 else -1)\n        if ctr not in ldct:\n            ldct[ctr] = eaten\n\n    ctr = 0\n    eaten = 0\n    for i in range(n, 2*n):\n        eaten += 1\n        ctr += (1 if ls[i] == 2 else -1)\n        if ctr not in rdct:\n            rdct[ctr] = eaten\n    return ldct, rdct\n\ndef find_min_jars(ldct, rdct, oneneed):\n    best = 99**99\n    for k in list(rdct.keys()):\n        otk = oneneed - k\n        if otk in ldct:\n            best = min(best, rdct[k] + ldct[otk])\n    return best\n\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        jars = list(map(int, input().split()))\n        test_cases.append((n, jars))\n\n    result = find_jars_to_empty(t, test_cases)\n    for res in result:\n        print(res)\n\nif __name__ == '__main__':\n    main()\n"],"transformed_sc":["t = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    jars = list(map(int, input().split()))\n    test_cases.append((n, jars))\nresult = []\nfor i in range(t):\n    n = test_cases[i][0]\n    ls = test_cases[i][1]\n    oneneed = 2 * (n - ls.count(1))\n    ldct = {0: 0}\n    rdct = {0: 0}\n    ctr = 0\n    eaten = 0\n    for j in range(n-1, -1, -1):\n        eaten += 1\n        ctr += (1 if ls[j] == 2 else -1)\n        if ctr not in ldct:\n            ldct[ctr] = eaten\n    ctr = 0\n    eaten = 0\n    for j in range(n, 2*n):\n        eaten += 1\n        ctr += (1 if ls[j] == 2 else -1)\n        if ctr not in rdct:\n            rdct[ctr] = eaten\n    best = 99**99\n    for k in list(rdct.keys()):\n        otk = oneneed - k\n        if otk in ldct:\n            best = min(best, rdct[k] + ldct[otk])\n    result.append(best)\nfor res in result:\n    print(res)"]}
{"problem_id":692,"problem_description":"There is crazy man named P29892P. He always tries to do crazy things as he thinks. One day he invented a machine and named it as ANGEN. The ANGEN is used to perform range operations. The range operation means performing operations on range values from {L..R}. At any time it performs operations on values in between L to R.\nANGEN can perform following operations\nU I V - Update the value present at I  with value V\nA L R - Find the sum between range L and R\nM L R - Find the maximum number between L and R\nm L R - Find the minimum number between L and R\nS L R - Find second maximum value in between L and R\ns L R - Find second mimimum value in between L and R\nIf it is not possible perform operation ANGEN returns \u201cNA\u201d with out quotes.\nFor Invalid operations ANGEN returns \u201c!!!\u201d with out quotes.\nNow P29892P challenging his friends and you too, to build his invention with yourown code. So it's your time to defeat P29892P by implementing his invention with your own ability. Let's go and solve the problem.\n\n-----Input-----\nInput description.\n- The first line of the input contains an integer N denoting the number of integers. \n- The next line contains N space separated integers.\"\n- The next line contains a single integer Q denoting the number of Questions.\n-  The next Q lines contains T Question type , L and R.\n\n-----Output-----\nPrint output for each question in separate line.\n\n-----Constraints-----\nShould contain all the constraints on the input data that you may have. Format it like:\n- 1 \u2264 N \u2264 100000\n- 1 \u2264 values[i] \u2264 1000000000\n- 1 \u2264 Q \u2264 10000\n- T in { A..Z, a..z }\n- 1 \u2264 L \u2264 R \u2264 N\n\n-----Example-----\nInput:\n6\n1 2 5 3 10 6\n6\nA 1 5\nM 1 3\nm 5 6\ns 3 6\nU 1 7\nS 1 2\n\nOutput:\n21\n5\n6\n5\n2\n\n-----Explanation-----\n...","starter_code":"","sc_instruction":"Write a python code to solve the following coding problem that obeys the constraints and passes the example test cases. The output code needs to read from and write to standard IO. Please wrap your code answer using ```:","mc_instruction":"Write a python code to solve the following coding problem that obeys the constraints and passes the example test cases. The output code needs to read from and write to standard IO. Ensure modularity of the python code by dividing the code into smaller, useful functions to solve the given problem. Please wrap your code answer using ```:","sc":"n = eval(input())\narr = list(map(int,input().split()))\nq = eval(input())\nwhile q:\n q -= 1\n ar = input().split()\n t = ar[0]\n l = int(ar[1])\n r = int(ar[2])\n l -= 1\n if t == 'U':\n  arr[l] = r\n elif t == 'A':\n  print(sum(arr[l:r]))\n elif t == 'M':\n  print(max(arr[l:r]))\n elif t == 'm':\n  print(min(arr[l:r]))\n elif t == 'S':\n  m = max(arr[l:r])\n  m2 = -1\n  for i in range(l, r):\n   if arr[i] < m and arr[i] > m2:\n    m2 = arr[i]\n  print(m2)\n elif t == 's':\n  m = min(arr[l:r])\n  m2 = 1000000000000\n  for i in range(l, r):\n   if arr[i] > m and arr[i] < m2:\n    m2 = arr[i]\n  print(m2)","sc_cc":14.0,"mc":"def na(l,r):\n if l-1>=r or l>n or r>n:\n  return True\n else:\n  return False\n\ndef na_print():\n print('NA')\n\n\n\ndef func(t,l,r):\n if t=='U':\n  try:\n   a[l-1]=r\n   return ''\n  except:\n   print('NA')\n   return ''\n elif na(l,r):\n  na_print()\n  return ''\n \n if t=='A':\n  print(sum(a[l-1:r]))\n  \n elif t=='M':\n  print(max(a[l-1:r]))\n  \n elif t=='m':\n  print(min(a[l-1:r]))\n  \n elif t=='S':\n  bb = list(set(a[l-1:r]))\n  bb.sort()\n  print(bb[-2])\n  \n elif t=='s':\n  bb = list(set(a[l-1:r]))\n  bb.sort()\n  print(bb[1])\n  \n else:\n  print('!!!')\n\n\n\n\nn = eval(input())\na = list(map(int, input().split()))\nq = eval(input())\n\nfor i in range(q):\n t,l,r = input().split()\n func(t,int(l),int(r))","mc_cc":4.0,"transformed_mc":["\ndef update_value(arr, idx, val):\n    arr[idx] = val\n\ndef find_sum(arr, start, end):\n    return sum(arr[start:end])\n\ndef find_max(arr, start, end):\n    return max(arr[start:end])\n\ndef find_min(arr, start, end):\n    return min(arr[start:end])\n\ndef find_second_max(arr, start, end):\n    max_val = max(arr[start:end])\n    second_max = -1\n    for i in range(start, end):\n        if arr[i] < max_val and arr[i] > second_max:\n            second_max = arr[i]\n    return second_max\n\ndef find_second_min(arr, start, end):\n    min_val = min(arr[start:end])\n    second_min = 1000000000000\n    for i in range(start, end):\n        if arr[i] > min_val and arr[i] < second_min:\n            second_min = arr[i]\n    return second_min\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    \n    while q:\n        q -= 1\n        ar = input().split()\n        t = ar[0]\n        l = int(ar[1]) - 1\n        r = int(ar[2])\n        \n        if t == 'U':\n            update_value(arr, l, r)\n        elif t == 'A':\n            print(find_sum(arr, l, r))\n        elif t == 'M':\n            print(find_max(arr, l, r))\n        elif t == 'm':\n            print(find_min(arr, l, r))\n        elif t == 'S':\n            print(find_second_max(arr, l, r))\n        elif t == 's':\n            print(find_second_min(arr, l, r))\n\nif __name__ == '__main__':\n    main()\n"],"transformed_sc":["n = int(input())\narr = list(map(int, input().split()))\nq = int(input())\n\nwhile q:\n    q -= 1\n    ar = input().split()\n    t = ar[0]\n    l = int(ar[1]) - 1\n    r = int(ar[2])\n    \n    if t == 'U':\n        arr[l] = r\n    elif t == 'A':\n        print(sum(arr[l:r]))\n    elif t == 'M':\n        print(max(arr[l:r]))\n    elif t == 'm':\n        print(min(arr[l:r]))\n    elif t == 'S':\n        max_val = max(arr[l:r])\n        second_max = -1\n        for i in range(l, r):\n            if arr[i] < max_val and arr[i] > second_max:\n                second_max = arr[i]\n        print(second_max)\n    elif t == 's':\n        min_val = min(arr[l:r])\n        second_min = 1000000000000\n        for i in range(l, r):\n            if arr[i] > min_val and arr[i] < second_min:\n                second_min = arr[i]\n        print(second_min)"]}

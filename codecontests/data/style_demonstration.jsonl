{"description": "After winning gold and silver in IOI 2014, Akshat and Malvika want to have some fun. Now they are playing a game on a grid made of n horizontal and m vertical sticks.\n\nAn intersection point is any point on the grid which is formed by the intersection of one horizontal stick and one vertical stick.\n\nIn the grid shown below, n = 3 and m = 3. There are n + m = 6 sticks in total (horizontal sticks are shown in red and vertical sticks are shown in green). There are n\u00b7m = 9 intersection points, numbered from 1 to 9.\n\n<image>\n\nThe rules of the game are very simple. The players move in turns. Akshat won gold, so he makes the first move. During his/her move, a player must choose any remaining intersection point and remove from the grid all sticks which pass through this point. A player will lose the game if he/she cannot make a move (i.e. there are no intersection points remaining on the grid at his/her move).\n\nAssume that both players play optimally. Who will win the game?\n\nInput\n\nThe first line of input contains two space-separated integers, n and m (1 \u2264 n, m \u2264 100).\n\nOutput\n\nPrint a single line containing \"Akshat\" or \"Malvika\" (without the quotes), depending on the winner of the game.\n\nExamples\n\nInput\n\n2 2\n\n\nOutput\n\nMalvika\n\n\nInput\n\n2 3\n\n\nOutput\n\nMalvika\n\n\nInput\n\n3 3\n\n\nOutput\n\nAkshat\n\nNote\n\nExplanation of the first sample:\n\nThe grid has four intersection points, numbered from 1 to 4.\n\n<image>\n\nIf Akshat chooses intersection point 1, then he will remove two sticks (1 - 2 and 1 - 3). The resulting grid will look like this.\n\n<image>\n\nNow there is only one remaining intersection point (i.e. 4). Malvika must choose it and remove both remaining sticks. After her move the grid will be empty.\n\nIn the empty grid, Akshat cannot make any move, hence he will lose.\n\nSince all 4 intersection points of the grid are equivalent, Akshat will lose no matter which one he picks.", "code": "n,m=map(int,input().split())\nprint(['Malvika','Akshat'][min(n,m)%2!=0])", "score_style": {"score_pep8": 0.0, "score_style": 0.05, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "You are given string s. Your task is to determine if the given string s contains two non-overlapping substrings \"AB\" and \"BA\" (the substrings can go in any order).\n\nInput\n\nThe only line of input contains a string s of length between 1 and 105 consisting of uppercase Latin letters.\n\nOutput\n\nPrint \"YES\" (without the quotes), if string s contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\nExamples\n\nInput\n\nABA\n\n\nOutput\n\nNO\n\n\nInput\n\nBACFAB\n\n\nOutput\n\nYES\n\n\nInput\n\nAXBYBXA\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample test, despite the fact that there are substrings \"AB\" and \"BA\", their occurrences overlap, so the answer is \"NO\".\n\nIn the second sample test there are the following occurrences of the substrings: BACFAB.\n\nIn the third sample test there is no substring \"AB\" nor substring \"BA\".", "code": "def solve(s):\n    ab1, ab2 = s.find('AB'), s.rfind('AB')\n    ba1, ba2 = s.find('BA'), s.rfind('BA')\n\n    if ab1 >= 0 and ba1 >= 0 and (abs(ab1 - ba2) > 1 or abs(ab2 - ba1) > 1):\n        print('YES')\n    else:\n        print('NO')\n\nsolve(input())\n", "score_style": {"score_pep8": 0.9, "score_style": 0.5800000000000001, "score_var": 0.26}, "score_modularity": 0.0}
{"description": "Given a permutation p of length n, find its subsequence s_1, s_2, \u2026, s_k of length at least 2 such that:\n\n  * |s_1-s_2|+|s_2-s_3|+\u2026+|s_{k-1}-s_k| is as big as possible over all subsequences of p with length at least 2. \n  * Among all such subsequences, choose the one whose length, k, is as small as possible. \n\n\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\nA sequence a is a subsequence of an array b if a can be obtained from b by deleting some (possibly, zero or all) elements.\n\nA permutation of length n is an array of length n in which every element from 1 to n occurs exactly once.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (2 \u2264 n \u2264 10^5) \u2014 the length of the permutation p.\n\nThe second line of each test case contains n integers p_1, p_2, \u2026, p_{n} (1 \u2264 p_i \u2264 n, p_i are distinct) \u2014 the elements of the permutation p.\n\nThe sum of n across the test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, the first line should contain the length of the found subsequence, k. The second line should contain s_1, s_2, \u2026, s_k \u2014 its elements.\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\nExample\n\nInput\n\n\n2\n3\n3 2 1\n4\n1 3 4 2\n\n\nOutput\n\n\n2\n3 1 \n3\n1 4 2 \n\nNote\n\nIn the first test case, there are 4 subsequences of length at least 2:\n\n  * [3,2] which gives us |3-2|=1. \n  * [3,1] which gives us |3-1|=2. \n  * [2,1] which gives us |2-1|=1. \n  * [3,2,1] which gives us |3-2|+|2-1|=2. \n\n\n\nSo the answer is either [3,1] or [3,2,1]. Since we want the subsequence to be as short as possible, the answer is [3,1].", "code": "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = [int(s) for s in input().split()]\n    cur_sum = 0\n    for i in range(1,n):\n        cur_sum = cur_sum + abs(arr[i]-arr[i-1])\n    removed = [0 for i in range(n)]\n    intact = [arr[0]]\n    for i in range(1, n-1):\n        x = abs(arr[i]-intact[-1]) + abs(arr[i] - arr[i+1])\n        y = abs(intact[-1]-arr[i+1])\n        \n        \n        \n        \n        if y < x:\n            intact.append(arr[i])\n    intact.append(arr[n-1])\n    ans = []\n    for i in range(n):\n        if not removed[i]:\n            ans.append(arr[i])\n    print(len(intact))\n    print(*intact)\n", "score_style": {"score_pep8": 0.7692307692307692, "score_style": 0.5300699300699301, "score_var": 0.2909090909090909}, "score_modularity": 0.0}
{"description": "Santa has n candies and he wants to gift them to k kids. He wants to divide as many candies as possible between all k kids. Santa can't divide one candy into parts but he is allowed to not use some candies at all.\n\nSuppose the kid who recieves the minimum number of candies has a candies and the kid who recieves the maximum number of candies has b candies. Then Santa will be satisfied, if the both conditions are met at the same time:\n\n  * b - a \u2264 1 (it means b = a or b = a + 1); \n  * the number of kids who has a+1 candies (note that a+1 not necessarily equals b) does not exceed \u230ak/2\u230b (less than or equal to \u230ak/2\u230b). \n\n\n\n\u230ak/2\u230b is k divided by 2 and rounded down to the nearest integer. For example, if k=5 then \u230ak/2\u230b=\u230a5/2\u230b=2.\n\nYour task is to find the maximum number of candies Santa can give to kids so that he will be satisfied.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 5 \u22c5 10^4) \u2014 the number of test cases.\n\nThe next t lines describe test cases. The i-th test case contains two integers n and k (1 \u2264 n, k \u2264 10^9) \u2014 the number of candies and the number of kids.\n\nOutput\n\nFor each test case print the answer on it \u2014 the maximum number of candies Santa can give to kids so that he will be satisfied.\n\nExample\n\nInput\n\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n\nOutput\n\n\n5\n18\n10\n6\n75015\n\nNote\n\nIn the first test case, Santa can give 3 and 2 candies to kids. There a=2, b=3,a+1=3.\n\nIn the second test case, Santa can give 5, 5, 4 and 4 candies. There a=4,b=5,a+1=5. The answer cannot be greater because then the number of kids with 5 candies will be 3.\n\nIn the third test case, Santa can distribute candies in the following way: [1, 2, 2, 1, 1, 2, 1]. There a=1,b=2,a+1=2. He cannot distribute two remaining candies in a way to be satisfied.\n\nIn the fourth test case, Santa can distribute candies in the following way: [3, 3]. There a=3, b=3, a+1=4. Santa distributed all 6 candies.", "code": "def solve():\n    n, k = map(int, input().split())\n\n    b = n//k\n    n -= b*k\n    x = min(k//2, n)\n    return b*k+x\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        print(solve())\n\n\nif __name__ == \"__main__\":\n    main()\n", "score_style": {"score_pep8": 1.0, "score_style": 0.55, "score_var": 0.1}, "score_modularity": 1.0}
{"description": "Having written another programming contest, three Rabbits decided to grab some lunch. The coach gave the team exactly k time units for the lunch break.\n\nThe Rabbits have a list of n restaurants to lunch in: the i-th restaurant is characterized by two integers fi and ti. Value ti shows the time the Rabbits need to lunch in the i-th restaurant. If time ti exceeds the time k that the coach has given for the lunch break, then the Rabbits' joy from lunching in this restaurant will equal fi - (ti - k). Otherwise, the Rabbits get exactly fi units of joy.\n\nYour task is to find the value of the maximum joy the Rabbits can get from the lunch, depending on the restaurant. The Rabbits must choose exactly one restaurant to lunch in. Note that the joy value isn't necessarily a positive value. \n\nInput\n\nThe first line contains two space-separated integers \u2014 n (1 \u2264 n \u2264 104) and k (1 \u2264 k \u2264 109) \u2014 the number of restaurants in the Rabbits' list and the time the coach has given them to lunch, correspondingly. Each of the next n lines contains two space-separated integers \u2014 fi (1 \u2264 fi \u2264 109) and ti (1 \u2264 ti \u2264 109) \u2014 the characteristics of the i-th restaurant.\n\nOutput\n\nIn a single line print a single integer \u2014 the maximum joy value that the Rabbits will get from the lunch. \n\nExamples\n\nInput\n\n2 5\n3 3\n4 5\n\n\nOutput\n\n4\n\n\nInput\n\n4 6\n5 8\n3 6\n2 3\n2 2\n\n\nOutput\n\n3\n\n\nInput\n\n1 5\n1 7\n\n\nOutput\n\n-1", "code": "(n,k)=input().split()\nn=int(n)\nk=int(k)\nmax=-9999999999999999\nfor i in range(n):\n\t(f,t)=input().split()\n\tf=int(f)\n\tt=int(t)\n\tif(t>k):\n\t\tmax=max if(max>f-t+k) else (f-t+k)\n\telse:\n\t\tmax=max if(max>f) else f\nprint(max)", "score_style": {"score_pep8": 0.15384615384615385, "score_style": 0.12692307692307692, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "A competitive eater, Alice is scheduling some practices for an eating contest on a magical calendar. The calendar is unusual because a week contains not necessarily 7 days!\n\nIn detail, she can choose any integer k which satisfies 1 \u2264 k \u2264 r, and set k days as the number of days in a week.\n\nAlice is going to paint some n consecutive days on this calendar. On this calendar, dates are written from the left cell to the right cell in a week. If a date reaches the last day of a week, the next day's cell is the leftmost cell in the next (under) row.\n\nShe wants to make all of the painted cells to be connected by side. It means, that for any two painted cells there should exist at least one sequence of painted cells, started in one of these cells, and ended in another, such that any two consecutive cells in this sequence are connected by side.\n\nAlice is considering the shape of the painted cells. Two shapes are the same if there exists a way to make them exactly overlapped using only parallel moves, parallel to the calendar's sides.\n\nFor example, in the picture, a week has 4 days and Alice paints 5 consecutive days. [1] and [2] are different shapes, but [1] and [3] are equal shapes.\n\n<image>\n\nAlice wants to know how many possible shapes exists if she set how many days a week has and choose consecutive n days and paints them in calendar started in one of the days of the week. As was said before, she considers only shapes, there all cells are connected by side.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case, the only line contains two integers n, r (1 \u2264 n \u2264 10^9, 1 \u2264 r \u2264 10^9).\n\nOutput\n\nFor each test case, print a single integer \u2014 the answer to the problem.\n\nPlease note, that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language.\n\nExample\n\nInput\n\n\n5\n3 4\n3 2\n3 1\n13 7\n1010000 9999999\n\n\nOutput\n\n\n4\n3\n1\n28\n510049495001\n\nNote\n\nIn the first test case, Alice can set 1,2,3 or 4 days as the number of days in a week.\n\nThere are 6 possible paintings shown in the picture, but there are only 4 different shapes. So, the answer is 4. Notice that the last example in the picture is an invalid painting because all cells are not connected by sides.\n\n<image>\n\nIn the last test case, be careful with the overflow issue, described in the output format.", "code": "rr = lambda: input().strip()\nrrm = lambda: map(int, rr().split())\n\ndef solve():\n    n,r = rrm()\n    ans = 0\n    if(n>r):\n        ans = r*(r+1)//2\n    else:\n        ans = n*(n-1)//2\n        ans += 1\n\n    return ans\n\nT = int(rr())\nfor _ in range(T):\n\n    ans = solve()\n    print(ans)", "score_style": {"score_pep8": 0.6842105263157895, "score_style": 0.42781954887218043, "score_var": 0.17142857142857143}, "score_modularity": 1.0}
{"description": "Every evening Vitalya sets n alarm clocks to wake up tomorrow. Every alarm clock rings during exactly one minute and is characterized by one integer ai \u2014 number of minute after midnight in which it rings. Every alarm clock begins ringing at the beginning of the minute and rings during whole minute. \n\nVitalya will definitely wake up if during some m consecutive minutes at least k alarm clocks will begin ringing. Pay attention that Vitalya considers only alarm clocks which begin ringing during given period of time. He doesn't consider alarm clocks which started ringing before given period of time and continues ringing during given period of time.\n\nVitalya is so tired that he wants to sleep all day long and not to wake up. Find out minimal number of alarm clocks Vitalya should turn off to sleep all next day. Now all alarm clocks are turned on. \n\nInput\n\nFirst line contains three integers n, m and k (1 \u2264 k \u2264 n \u2264 2\u00b7105, 1 \u2264 m \u2264 106) \u2014 number of alarm clocks, and conditions of Vitalya's waking up. \n\nSecond line contains sequence of distinct integers a1, a2, ..., an (1 \u2264 ai \u2264 106) in which ai equals minute on which i-th alarm clock will ring. Numbers are given in arbitrary order. Vitalya lives in a Berland in which day lasts for 106 minutes. \n\nOutput\n\nOutput minimal number of alarm clocks that Vitalya should turn off to sleep all next day long.\n\nExamples\n\nInput\n\n3 3 2\n3 5 1\n\n\nOutput\n\n1\n\n\nInput\n\n5 10 3\n12 8 18 25 1\n\n\nOutput\n\n0\n\n\nInput\n\n7 7 2\n7 3 4 1 6 5 2\n\n\nOutput\n\n6\n\n\nInput\n\n2 2 2\n1 3\n\n\nOutput\n\n0\n\nNote\n\nIn first example Vitalya should turn off first alarm clock which rings at minute 3.\n\nIn second example Vitalya shouldn't turn off any alarm clock because there are no interval of 10 consequence minutes in which 3 alarm clocks will ring.\n\nIn third example Vitalya should turn off any 6 alarm clocks.", "code": "n,m,k = map(int,input().split())\nlis = sorted(map(int,input().split()))+[1000000000000000]\nj=zer=ans=0\nfor i in range(n):\n    if lis[i]==0:\n        zer-=1\n        continue\n    j=max(j,i)\n    while j<=n and lis[j]-lis[i]<m:\n        j+=1\n    if j-i-zer>=k:\n        a=j-1\n        ext=j-i-zer-k+1\n        t=0\n        while a>=0 and ext>0:\n            if lis[a]!=0:\n                lis[a]=0\n                t+=1\n                zer+=1\n                ext-=1\n            a-=1\n        ans+=t\n    if lis[i]==0:\n        zer-=1       \nprint(ans)            \n\n\n", "score_style": {"score_pep8": 0.12, "score_style": 0.14636363636363636, "score_var": 0.17272727272727273}, "score_modularity": 0.0}
{"description": "Polycarp has an array a consisting of n integers.\n\nHe wants to play a game with this array. The game consists of several moves. On the first move he chooses any element and deletes it (after the first move the array contains n-1 elements). For each of the next moves he chooses any element with the only restriction: its parity should differ from the parity of the element deleted on the previous move. In other words, he alternates parities (even-odd-even-odd-... or odd-even-odd-even-...) of the removed elements. Polycarp stops if he can't make a move.\n\nFormally: \n\n  * If it is the first move, he chooses any element and deletes it; \n  * If it is the second or any next move: \n    * if the last deleted element was odd, Polycarp chooses any even element and deletes it; \n    * if the last deleted element was even, Polycarp chooses any odd element and deletes it. \n  * If after some move Polycarp cannot make a move, the game ends. \n\n\n\nPolycarp's goal is to minimize the sum of non-deleted elements of the array after end of the game. If Polycarp can delete the whole array, then the sum of non-deleted elements is zero.\n\nHelp Polycarp find this value.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2000) \u2014 the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^6), where a_i is the i-th element of a.\n\nOutput\n\nPrint one integer \u2014 the minimum possible sum of non-deleted elements of the array after end of the game.\n\nExamples\n\nInput\n\n\n5\n1 5 7 8 2\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n6\n5 1 2 4 6 3\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n2\n1000000 1000000\n\n\nOutput\n\n\n1000000", "code": "n=int(input())\na=list(map(int,input().split()))\ne,el=[],0\no,ol=[],0\nfor i in a:\n    if i%2==0:\n        e.append(i)\n        el=el+1\n    else:\n        o.append(i)\n        ol=ol+1\ne=sorted(e,reverse=True,key=int)\no=sorted(o,reverse=True,key=int)\nif el<ol:\n        print(sum(o[min(el,ol)+1:]))\nelif el>ol:\n        print(sum(e[min(el,ol)+1:]))\nelse:\n        print(0)", "score_style": {"score_pep8": 0.26315789473684215, "score_style": 0.19586466165413535, "score_var": 0.1285714285714286}, "score_modularity": 0.0}
{"description": "Bandits appeared in the city! One of them is trying to catch as many citizens as he can.\n\nThe city consists of n squares connected by n-1 roads in such a way that it is possible to reach any square from any other square. The square number 1 is the main square.\n\nAfter Sunday walk all the roads were changed to one-way roads in such a way that it is possible to reach any square from the main square.\n\nAt the moment when the bandit appeared on the main square there were a_i citizens on the i-th square. Now the following process will begin. First, each citizen that is currently on a square with some outgoing one-way roads chooses one of such roads and moves along it to another square. Then the bandit chooses one of the one-way roads outgoing from the square he is located and moves along it. The process is repeated until the bandit is located on a square with no outgoing roads. The bandit catches all the citizens on that square.\n\nThe bandit wants to catch as many citizens as possible; the citizens want to minimize the number of caught people. The bandit and the citizens know positions of all citizens at any time, the citizens can cooperate. If both sides act optimally, how many citizens will be caught?\n\nInput\n\nThe first line contains a single integer n \u2014 the number of squares in the city (2 \u2264 n \u2264 2\u22c510^5).\n\nThe second line contains n-1 integers p_2, p_3 ... p_n meaning that there is a one-way road from the square p_i to the square i (1 \u2264 p_i < i). \n\nThe third line contains n integers a_1, a_2, ..., a_n \u2014 the number of citizens on each square initially (0 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint a single integer \u2014 the number of citizens the bandit will catch if both sides act optimally.\n\nExamples\n\nInput\n\n\n3\n1 1\n3 1 2\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n3\n1 1\n3 1 3\n\n\nOutput\n\n\n4\n\nNote\n\nIn the first example the citizens on the square 1 can split into two groups 2 + 1, so that the second and on the third squares will have 3 citizens each.\n\nIn the second example no matter how citizens act the bandit can catch at least 4 citizens.", "code": "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\nn = val()\nparents = [1, 1] + li()\nvalues = [0] + li()\n\nsizes = [1] * (n + 5)\n\nfor i in range(2, n + 1, 1):\n    sizes[parents[i]] = 0\n    \nans = -float('inf')\n\nfor i in range(n, 0, -1):\n    ans = max(ans, (values[i] + sizes[i] - 1) / sizes[i])\n    values[parents[i]] += values[i]\n    sizes[parents[i]] += sizes[i]\n    \nprint(int(ans))\n    ", "score_style": {"score_pep8": 0.5555555555555556, "score_style": 0.4465277777777778, "score_var": 0.3375}, "score_modularity": 0.6666666666666666}
{"description": "It\u2019s still hot every day, but September has already come. It\u2019s autumn according to the calendar. Looking around, I see two red dragonflies at rest on the wall in front of me. It\u2019s autumn indeed.\n\nWhen two red dragonflies\u2019 positional information as measured from the end of the wall is given, make a program to calculate the distance between their heads.\n\n\n\nInput\n\nThe input is given in the following format.\n\n\n$x_1$ $x_2$\n\n\nThe input line provides dragonflies\u2019 head positions $x_1$ and $x_2$ ($0 \\leq x_1, x_2 \\leq 100$) as integers.\n\nOutput\n\nOutput the distance between the two red dragonflies in a line.\n\nExamples\n\nInput\n\n20 30\n\n\nOutput\n\n10\n\n\nInput\n\n50 25\n\n\nOutput\n\n25\n\n\nInput\n\n25 25\n\n\nOutput\n\n0", "code": "x1,x2=map(int,input().split())\nif x1<=x2:\n    print(x2-x1)\nelse:\n    print(x1-x2)\n", "score_style": {"score_pep8": 0.6, "score_style": 0.4, "score_var": 0.2}, "score_modularity": 0.0}
{"description": "Every summer Vitya comes to visit his grandmother in the countryside. This summer, he got a huge wart. Every grandma knows that one should treat warts when the moon goes down. Thus, Vitya has to catch the moment when the moon is down.\n\nMoon cycle lasts 30 days. The size of the visible part of the moon (in Vitya's units) for each day is 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, and then cycle repeats, thus after the second 1 again goes 0.\n\nAs there is no internet in the countryside, Vitya has been watching the moon for n consecutive days and for each of these days he wrote down the size of the visible part of the moon. Help him find out whether the moon will be up or down next day, or this cannot be determined by the data he has.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 92) \u2014 the number of consecutive days Vitya was watching the size of the visible part of the moon. \n\nThe second line contains n integers ai (0 \u2264 ai \u2264 15) \u2014 Vitya's records.\n\nIt's guaranteed that the input data is consistent.\n\nOutput\n\nIf Vitya can be sure that the size of visible part of the moon on day n + 1 will be less than the size of the visible part on day n, then print \"DOWN\" at the only line of the output. If he might be sure that the size of the visible part will increase, then print \"UP\". If it's impossible to determine what exactly will happen with the moon, print -1.\n\nExamples\n\nInput\n\n5\n3 4 5 6 7\n\n\nOutput\n\nUP\n\n\nInput\n\n7\n12 13 14 15 14 13 12\n\n\nOutput\n\nDOWN\n\n\nInput\n\n1\n8\n\n\nOutput\n\n-1\n\nNote\n\nIn the first sample, the size of the moon on the next day will be equal to 8, thus the answer is \"UP\".\n\nIn the second sample, the size of the moon on the next day will be 11, thus the answer is \"DOWN\".\n\nIn the third sample, there is no way to determine whether the size of the moon on the next day will be 7 or 9, thus the answer is -1.", "code": "s=\"012345678910111213141514131211109876543210\"\nb=int(input())\nd=list(input().split())\na=''.join(d)\nif b>=2:\n    c=''.join(d[b-2]+d[b-1])\nif b==1 and a[:]=='0':\n    print(\"UP\")\nelif b==1 and a[:]!='0' and a[:]!='15':\n    print(\"-1\")\nelif b==1 and a[:]=='15':\n    print(\"DOWN\")\nelif c=='21':\n    print(\"DOWN\")\nelse:print(\"DOWN\" if ((s.find(c)+len(c)-1)>=21 and (s.find(c)+len(c)-1)<41) else \"UP\")", "score_style": {"score_pep8": 0.2666666666666667, "score_style": 0.18333333333333335, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "After the lessons n groups of schoolchildren went outside and decided to visit Polycarpus to celebrate his birthday. We know that the i-th group consists of si friends (1 \u2264 si \u2264 4), and they want to go to Polycarpus together. They decided to get there by taxi. Each car can carry at most four passengers. What minimum number of cars will the children need if all members of each group should ride in the same taxi (but one taxi can take more than one group)?\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 105) \u2014 the number of groups of schoolchildren. The second line contains a sequence of integers s1, s2, ..., sn (1 \u2264 si \u2264 4). The integers are separated by a space, si is the number of children in the i-th group.\n\nOutput\n\nPrint the single number \u2014 the minimum number of taxis necessary to drive all children to Polycarpus.\n\nExamples\n\nInput\n\n5\n1 2 4 3 3\n\n\nOutput\n\n4\n\n\nInput\n\n8\n2 3 4 4 2 1 3 1\n\n\nOutput\n\n5\n\nNote\n\nIn the first test we can sort the children into four cars like this:\n\n  * the third group (consisting of four children), \n  * the fourth group (consisting of three children), \n  * the fifth group (consisting of three children), \n  * the first and the second group (consisting of one and two children, correspondingly). \n\n\n\nThere are other ways to sort the groups into four cars.", "code": "import math\nimport itertools\n\nimport os\nimport sys\n\nimport re\nimport functools\nimport operator\n\nn = int(input())\nA = sorted(map(int, input().split()))\n\ni, j, num = 0, len(A) - 1, 0\nwhile i < j:\n    \n    group, j = A[j], j - 1    \n    while i <= j and group + A[i] <= 4:\n        group, i = group + A[i], i + 1\n        \n    num = num + 1\n    \nprint(num if i != j else num + 1)", "score_style": {"score_pep8": 0.5217391304347826, "score_style": 0.36086956521739133, "score_var": 0.2}, "score_modularity": 0.0}
{"description": "n people are standing in a line to play table tennis. At first, the first two players in the line play a game. Then the loser goes to the end of the line, and the winner plays with the next person from the line, and so on. They play until someone wins k games in a row. This player becomes the winner.\n\nFor each of the participants, you know the power to play table tennis, and for all players these values are different. In a game the player with greater power always wins. Determine who will be the winner.\n\nInput\n\nThe first line contains two integers: n and k (2 \u2264 n \u2264 500, 2 \u2264 k \u2264 1012) \u2014 the number of people and the number of wins.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 n) \u2014 powers of the player. It's guaranteed that this line contains a valid permutation, i.e. all ai are distinct.\n\nOutput\n\nOutput a single integer \u2014 power of the winner.\n\nExamples\n\nInput\n\n2 2\n1 2\n\n\nOutput\n\n2 \n\nInput\n\n4 2\n3 1 2 4\n\n\nOutput\n\n3 \n\nInput\n\n6 2\n6 5 3 1 2 4\n\n\nOutput\n\n6 \n\nInput\n\n2 10000000000\n2 1\n\n\nOutput\n\n2\n\nNote\n\nGames in the second sample:\n\n3 plays with 1. 3 wins. 1 goes to the end of the line.\n\n3 plays with 2. 3 wins. He wins twice in a row. He becomes the winner.", "code": "\nfrom collections import deque\n\ndef TableTennis(pw, power):\n    wins = 0\n    power = deque(power)\n    p1 = power.popleft()\n    p2 = power[0]\n    \n    if len(power) == 1:\n        if p1 > p2:\n            print(p1)\n        else:\n            print(p2)\n    else:\n        while wins != pw[1]:\n            if pw[1] > 500 and wins > 500 :\n                break\n            if p1 > p2:\n                power.append(power.popleft())\n                p2 = power[0]\n                wins += 1\n            else: \n                power.append(p1)\n                p1 = power.popleft()\n                p2 = power[0]\n                wins = 1\n    \n                \n        print(p1)\n\npw = [int(x) for x in input().split()]\npower = [int(x) for x in input().split()]\nTableTennis(pw,power)", "score_style": {"score_pep8": 0.7272727272727273, "score_style": 0.49696969696969695, "score_var": 0.26666666666666666}, "score_modularity": 0.0}
{"description": "Theatre Square in the capital city of Berland has a rectangular shape with the size n \u00d7 m meters. On the occasion of the city's anniversary, a decision was taken to pave the Square with square granite flagstones. Each flagstone is of the size a \u00d7 a.\n\nWhat is the least number of flagstones needed to pave the Square? It's allowed to cover the surface larger than the Theatre Square, but the Square has to be covered. It's not allowed to break the flagstones. The sides of flagstones should be parallel to the sides of the Square.\n\nInput\n\nThe input contains three positive integer numbers in the first line: n, m and a (1 \u2264 n, m, a \u2264 109).\n\nOutput\n\nWrite the needed number of flagstones.\n\nExamples\n\nInput\n\n6 6 4\n\n\nOutput\n\n4", "code": "import math\nnumbers = list(map(int, input().split()))\na = math.ceil(numbers[0]/numbers[2])\nb = math.ceil(numbers[1]/numbers[2])\nprint(a*b)", "score_style": {"score_pep8": 1.0, "score_style": 0.65, "score_var": 0.3}, "score_modularity": 0.0}
{"description": "One day three best friends Petya, Vasya and Tonya decided to form a team and take part in programming contests. Participants are usually offered several problems during programming contests. Long before the start the friends decided that they will implement a problem if at least two of them are sure about the solution. Otherwise, the friends won't write the problem's solution.\n\nThis contest offers n problems to the participants. For each problem we know, which friend is sure about the solution. Help the friends find the number of problems for which they will write a solution.\n\nInput\n\nThe first input line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of problems in the contest. Then n lines contain three integers each, each integer is either 0 or 1. If the first number in the line equals 1, then Petya is sure about the problem's solution, otherwise he isn't sure. The second number shows Vasya's view on the solution, the third number shows Tonya's view. The numbers on the lines are separated by spaces.\n\nOutput\n\nPrint a single integer \u2014 the number of problems the friends will implement on the contest.\n\nExamples\n\nInput\n\n3\n1 1 0\n1 1 1\n1 0 0\n\n\nOutput\n\n2\n\n\nInput\n\n2\n1 0 0\n0 1 1\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample Petya and Vasya are sure that they know how to solve the first problem and all three of them know how to solve the second problem. That means that they will write solutions for these problems. Only Petya is sure about the solution for the third problem, but that isn't enough, so the friends won't take it. \n\nIn the second sample the friends will only implement the second problem, as Vasya and Tonya are sure about the solution.", "code": "out = 0\nnum_lines = int(input())\nfor n in range(num_lines):\n    line = input().split()\n    line_sum = 0\n    for n in line:\n        line_sum += int(n)\n    if line_sum > 1:\n        out += 1\nprint(out)\n", "score_style": {"score_pep8": 1.0, "score_style": 0.75, "score_var": 0.5}, "score_modularity": 0.0}
{"description": "Polycarp is reading a book consisting of n pages numbered from 1 to n. Every time he finishes the page with the number divisible by m, he writes down the last digit of this page number. For example, if n=15 and m=5, pages divisible by m are 5, 10, 15. Their last digits are 5, 0, 5 correspondingly, their sum is 10.\n\nYour task is to calculate the sum of all digits Polycarp has written down.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 1000) \u2014 the number of queries.\n\nThe following q lines contain queries, one per line. Each query is given as two integers n and m (1 \u2264 n, m \u2264 10^{16}) \u2014 the number of pages in the book and required divisor, respectively.\n\nOutput\n\nFor each query print the answer for it \u2014 the sum of digits written down by Polycarp.\n\nExample\n\nInput\n\n\n7\n1 1\n10 1\n100 3\n1024 14\n998244353 1337\n123 144\n1234312817382646 13\n\n\nOutput\n\n\n1\n45\n153\n294\n3359835\n0\n427262129093995", "code": "\nfor _ in range(int(input())):\n\tn,m=map(int,input().split())\n\tif(n<=m*10):\n\t\tx=m\n\t\tsum=0\n\t\twhile(x<=n):\n\t\t\tsum+=x%10\n\t\t\tx+=m\n\t\t\n\t\tprint(sum)\n\telse:\n\t\tsum=0\n\t\tx=m\n\t\twhile(x<=10*m):\n\t\t\tsum+=x%10\n\t\t\tx+=m\n\t\t\n\t\tx=10*m\n\t\tmul=n//x\n\t\tsum=sum*mul\n\t\tx=x*mul\n\t\twhile(x<=n):\n\t\t\tsum+=x%10\n\t\t\tx+=m\n\t\tprint(sum)\t\n\t\t", "score_style": {"score_pep8": 0.040000000000000036, "score_style": 0.09000000000000001, "score_var": 0.13999999999999999}, "score_modularity": 0.0}
{"description": "You may have already known that a standard ICPC team consists of exactly three members. The perfect team however has more restrictions. A student can have some specialization: coder or mathematician. She/he can have no specialization, but can't have both at the same time.\n\nSo the team is considered perfect if it includes at least one coder, at least one mathematician and it consists of exactly three members.\n\nYou are a coach at a very large university and you know that c of your students are coders, m are mathematicians and x have no specialization.\n\nWhat is the maximum number of full perfect teams you can distribute them into? \n\nNote that some students can be left without a team and each student can be a part of no more than one team.\n\nYou are also asked to answer q independent queries.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 10^4) \u2014 the number of queries. \n\nEach of the next q lines contains three integers c, m and x (0 \u2264 c, m, x \u2264 10^8) \u2014 the number of coders, mathematicians and students without any specialization in the university, respectively.\n\nNote that the no student is both coder and mathematician at the same time. \n\nOutput\n\nPrint q integers \u2014 the i-th of them should be the answer to the i query in the order they are given in the input. The answer is the maximum number of full perfect teams you can distribute your students into. \n\nExample\n\nInput\n\n\n6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n\n\nOutput\n\n\n1\n3\n0\n0\n1\n3\n\nNote\n\nIn the first example here are how teams are formed:\n\n  1. the only team of 1 coder, 1 mathematician and 1 without specialization; \n  2. all three teams consist of 1 coder and 2 mathematicians; \n  3. no teams can be formed; \n  4. no teams can be formed; \n  5. one team consists of 1 coder, 1 mathematician and 1 without specialization, the rest aren't able to form any team; \n  6. one team consists of 1 coder, 1 mathematician and 1 without specialization, one consists of 2 coders and 1 mathematician and one consists of 1 coder and 2 mathematicians. ", "code": "t = int(input())\nfor i in range(t):\n    c, m, x = map(int, input().split())\n    \n    r  = min(c, m)\n    a = abs(c - m) + x\n    \n    if a >= r:\n        print(r)\n    else:\n        print ((2 * r + a) // 3)\n    ", "score_style": {"score_pep8": 0.6363636363636364, "score_style": 0.36818181818181817, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Little Chris is bored during his physics lessons (too easy), so he has built a toy box to keep himself occupied. The box is special, since it has the ability to change gravity.\n\nThere are n columns of toy cubes in the box arranged in a line. The i-th column contains ai cubes. At first, the gravity in the box is pulling the cubes downwards. When Chris switches the gravity, it begins to pull all the cubes to the right side of the box. The figure shows the initial and final configurations of the cubes in the box: the cubes that have changed their position are highlighted with orange.\n\n<image>\n\nGiven the initial configuration of the toy cubes in the box, find the amounts of cubes in each of the n columns after the gravity switch!\n\nInput\n\nThe first line of input contains an integer n (1 \u2264 n \u2264 100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1 \u2264 ai \u2264 100) denotes the number of cubes in the i-th column.\n\nOutput\n\nOutput n integer numbers separated by spaces, where the i-th number is the amount of cubes in the i-th column after the gravity switch.\n\nExamples\n\nInput\n\n4\n3 2 1 2\n\n\nOutput\n\n1 2 2 3 \n\n\nInput\n\n3\n2 3 8\n\n\nOutput\n\n2 3 8 \n\nNote\n\nThe first example case is shown on the figure. The top cube of the first column falls to the top of the last column; the top cube of the second column falls to the top of the third column; the middle cube of the first column falls to the top of the second column.\n\nIn the second example case the gravity switch does not change the heights of the columns.", "code": "\nimport sys\n\nn = int(sys.stdin.readline())\narr = [int(c) for c in sys.stdin.readline().split()]\narr.sort()\narr = [str(i) for i in arr]\nprint(\" \".join(arr))", "score_style": {"score_pep8": 1.0, "score_style": 0.575, "score_var": 0.15}, "score_modularity": 0.0}
{"description": "You are given a string S of length N consisting of `(` and `)`. Your task is to insert some number of `(` and `)` into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:\n\n* `()` is a correct bracket sequence.\n* If X is a correct bracket sequence, the concatenation of `(`, X and `)` in this order is also a correct bracket sequence.\n* If X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\n* Every correct bracket sequence can be derived from the rules above.\n\n\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.\n\nConstraints\n\n* The length of S is N.\n* 1 \u2264 N \u2264 100\n* S consists of `(` and `)`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS\n\n\nOutput\n\nPrint the lexicographically smallest string among the shortest correct bracket sequences that can be obtained by inserting some number of `(` and `)` into S.\n\nExamples\n\nInput\n\n3\n())\n\n\nOutput\n\n(())\n\n\nInput\n\n6\n)))())\n\n\nOutput\n\n(((()))())\n\n\nInput\n\n8\n))))((((\n\n\nOutput\n\n(((())))(((())))", "code": "input();S=input();d=m=0\nfor c in S:\n if c==\"(\":d-=1\n else:d+=1\n m=max(d,m)\nS=\"(\"*m+S;d=m=0\nfor c in S[::-1]:\n if c==\"(\":d+=1\n else:d-=1\n m=max(d,m)\nprint(S+\")\"*m)", "score_style": {"score_pep8": 0.2727272727272727, "score_style": 0.18636363636363634, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "You have two integers l and r. Find an integer x which satisfies the conditions below:\n\n  * l \u2264 x \u2264 r. \n  * All digits of x are different. \n\n\n\nIf there are multiple answers, print any of them.\n\nInput\n\nThe first line contains two integers l and r (1 \u2264 l \u2264 r \u2264 10^{5}).\n\nOutput\n\nIf an answer exists, print any of them. Otherwise, print -1.\n\nExamples\n\nInput\n\n\n121 130\n\n\nOutput\n\n\n123\n\n\nInput\n\n\n98766 100000\n\n\nOutput\n\n\n-1\n\nNote\n\nIn the first example, 123 is one of the possible answers. However, 121 can't be the answer, because there are multiple 1s on different digits.\n\nIn the second example, there is no valid answer.", "code": "\nl,r=map(int,input().split())\nfor i in range(l,r+1):\n    s=str(i)\n    l=len(s)\n    s=sorted(s)\n    flag=0\n    for j in range(l-1):\n        if(s[j]==s[j+1]):\n            flag=1\n            break\n    if(flag==0):\n        print(i)\n        break\nif(flag==1):\n    print(\"-1\")\n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    ", "score_style": {"score_pep8": 0.33333333333333337, "score_style": 0.2416666666666667, "score_var": 0.15}, "score_modularity": 0.0}
{"description": "One day three best friends Petya, Vasya and Tonya decided to form a team and take part in programming contests. Participants are usually offered several problems during programming contests. Long before the start the friends decided that they will implement a problem if at least two of them are sure about the solution. Otherwise, the friends won't write the problem's solution.\n\nThis contest offers n problems to the participants. For each problem we know, which friend is sure about the solution. Help the friends find the number of problems for which they will write a solution.\n\nInput\n\nThe first input line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of problems in the contest. Then n lines contain three integers each, each integer is either 0 or 1. If the first number in the line equals 1, then Petya is sure about the problem's solution, otherwise he isn't sure. The second number shows Vasya's view on the solution, the third number shows Tonya's view. The numbers on the lines are separated by spaces.\n\nOutput\n\nPrint a single integer \u2014 the number of problems the friends will implement on the contest.\n\nExamples\n\nInput\n\n3\n1 1 0\n1 1 1\n1 0 0\n\n\nOutput\n\n2\n\n\nInput\n\n2\n1 0 0\n0 1 1\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample Petya and Vasya are sure that they know how to solve the first problem and all three of them know how to solve the second problem. That means that they will write solutions for these problems. Only Petya is sure about the solution for the third problem, but that isn't enough, so the friends won't take it. \n\nIn the second sample the friends will only implement the second problem, as Vasya and Tonya are sure about the solution.", "code": "a= int (input())\na=int (a)\ni=0\nwhile a>0:\n\tx,y,z=input().split(\" \")\n\tx=int (x)\n\ty=int(y)\n\tz=int(z)\n\ta-=1\n\tif x+y+z>=2:\n\t\ti+=1\nprint (i)\n\t\t\t \t\t  \t\t\t \t\t\t \t\t\t\t      \t \t \t", "score_style": {"score_pep8": 0.0, "score_style": 0.05, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "You may have already known that a standard ICPC team consists of exactly three members. The perfect team however has more restrictions. A student can have some specialization: coder or mathematician. She/he can have no specialization, but can't have both at the same time.\n\nSo the team is considered perfect if it includes at least one coder, at least one mathematician and it consists of exactly three members.\n\nYou are a coach at a very large university and you know that c of your students are coders, m are mathematicians and x have no specialization.\n\nWhat is the maximum number of full perfect teams you can distribute them into? \n\nNote that some students can be left without a team and each student can be a part of no more than one team.\n\nYou are also asked to answer q independent queries.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 10^4) \u2014 the number of queries. \n\nEach of the next q lines contains three integers c, m and x (0 \u2264 c, m, x \u2264 10^8) \u2014 the number of coders, mathematicians and students without any specialization in the university, respectively.\n\nNote that the no student is both coder and mathematician at the same time. \n\nOutput\n\nPrint q integers \u2014 the i-th of them should be the answer to the i query in the order they are given in the input. The answer is the maximum number of full perfect teams you can distribute your students into. \n\nExample\n\nInput\n\n\n6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n\n\nOutput\n\n\n1\n3\n0\n0\n1\n3\n\nNote\n\nIn the first example here are how teams are formed:\n\n  1. the only team of 1 coder, 1 mathematician and 1 without specialization; \n  2. all three teams consist of 1 coder and 2 mathematicians; \n  3. no teams can be formed; \n  4. no teams can be formed; \n  5. one team consists of 1 coder, 1 mathematician and 1 without specialization, the rest aren't able to form any team; \n  6. one team consists of 1 coder, 1 mathematician and 1 without specialization, one consists of 2 coders and 1 mathematician and one consists of 1 coder and 2 mathematicians. ", "code": "for _ in range(int(input())):\n\tc, m, a = map(int, input().split())\n\tprint(min(c, m, (c + m + a) // 3))", "score_style": {"score_pep8": 0.33333333333333337, "score_style": 0.21666666666666667, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "There are n students in the first grade of Nlogonia high school. The principal wishes to split the students into two classrooms (each student must be in exactly one of the classrooms). Two distinct students whose name starts with the same letter will be chatty if they are put in the same classroom (because they must have a lot in common). Let x be the number of such pairs of students in a split. Pairs (a, b) and (b, a) are the same and counted only once.\n\nFor example, if there are 6 students: \"olivia\", \"jacob\", \"tanya\", \"jack\", \"oliver\" and \"jessica\", then:\n\n  * splitting into two classrooms (\"jack\", \"jacob\", \"jessica\", \"tanya\") and (\"olivia\", \"oliver\") will give x=4 (3 chatting pairs in the first classroom, 1 chatting pair in the second classroom), \n  * splitting into two classrooms (\"jack\", \"tanya\", \"olivia\") and (\"jessica\", \"oliver\", \"jacob\") will give x=1 (0 chatting pairs in the first classroom, 1 chatting pair in the second classroom). \n\n\n\nYou are given the list of the n names. What is the minimum x we can obtain by splitting the students into classrooms?\n\nNote that it is valid to place all of the students in one of the classrooms, leaving the other one empty.\n\nInput\n\nThe first line contains a single integer n (1\u2264 n \u2264 100) \u2014 the number of students.\n\nAfter this n lines follow.\n\nThe i-th line contains the name of the i-th student.\n\nIt is guaranteed each name is a string of lowercase English letters of length at most 20. Note that multiple students may share the same name.\n\nOutput\n\nThe output must consist of a single integer x \u2014 the minimum possible number of chatty pairs.\n\nExamples\n\nInput\n\n\n4\njorge\njose\noscar\njerry\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n7\nkambei\ngorobei\nshichiroji\nkyuzo\nheihachi\nkatsushiro\nkikuchiyo\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n5\nmike\nmike\nmike\nmike\nmike\n\n\nOutput\n\n\n4\n\nNote\n\nIn the first sample the minimum number of pairs is 1. This can be achieved, for example, by putting everyone except jose in one classroom, and jose in the other, so jorge and jerry form the only chatty pair.\n\nIn the second sample the minimum number of pairs is 2. This can be achieved, for example, by putting kambei, gorobei, shichiroji and kyuzo in one room and putting heihachi, katsushiro and kikuchiyo in the other room. In this case the two pairs are kambei and kyuzo, and katsushiro and kikuchiyo.\n\nIn the third sample the minimum number of pairs is 4. This can be achieved by placing three of the students named mike in one classroom and the other two students in another classroom. Thus there will be three chatty pairs in one classroom and one chatty pair in the other classroom.", "code": "a=int(input())\nl=[]\nfor i in range(0,a):\n\tstr1=input()\n\tl.append(str1)\nl2=[]\nfor i in range(0,26):\n\tl2.append(0)\nfor i in range(0,a):\n\tx=ord(l[i][0])\n\tx=x-97\n\tl2[x]+=1\npairs=0\nfor i in range(0,26):\n\tif(l2[i]>1):\n\t\ty=int(l2[i]/2)\n\t\tadd1=int(((y)*(y-1))/2)\n\t\ty1=l2[i]-y\n\t\tadd2=int(((y1)*(y1-1))/2)\n\t\tpairs=pairs+add1+add2\nprint(pairs)", "score_style": {"score_pep8": 0.04761904761904767, "score_style": 0.14199134199134203, "score_var": 0.2363636363636364}, "score_modularity": 0.0}
{"description": "Polycarpus is an amateur businessman. Recently he was surprised to find out that the market for paper scissors is completely free! Without further ado, Polycarpus decided to start producing and selling such scissors.\n\nPolycaprus calculated that the optimal celling price for such scissors would be p bourles. However, he read somewhere that customers are attracted by prices that say something like \"Special Offer! Super price 999 bourles!\". So Polycarpus decided to lower the price a little if it leads to the desired effect.\n\nPolycarpus agrees to lower the price by no more than d bourles so that the number of nines at the end of the resulting price is maximum. If there are several ways to do it, he chooses the maximum possible price.\n\nNote, Polycarpus counts only the trailing nines in a price.\n\nInput\n\nThe first line contains two integers p and d (1 \u2264 p \u2264 1018; 0 \u2264 d < p) \u2014 the initial price of scissors and the maximum possible price reduction.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.\n\nOutput\n\nPrint the required price \u2014 the maximum price that ends with the largest number of nines and that is less than p by no more than d.\n\nThe required number shouldn't have leading zeroes.\n\nExamples\n\nInput\n\n1029 102\n\n\nOutput\n\n999\n\n\nInput\n\n27191 17\n\n\nOutput\n\n27189", "code": "\n\n\n\ndef back_9_count(s):\n    count = 0\n    for i in range(0,len(s)):\n        if s[len(s) - 1 -i] != '9':\n            break\n        count +=1\n    return count\nint_string,d = [i for i in input().split()]\nfull_length = len(int_string)\nd = int(d)\nflag = 0\nif back_9_count(int_string) >= full_length-1:\n    print(int_string)\nelse:\n    for i in range(1,full_length):\n        curr_int = int(int_string[i:])\n        \n        curr_int +=1\n        if curr_int <= d:\n\n            flag = 1\n            break\n    if flag:\n        print(int(int_string) -  curr_int)\n    else:\n        print(int_string)\n        #dummy", "score_style": {"score_pep8": 0.6666666666666667, "score_style": 0.5895833333333333, "score_var": 0.5125}, "score_modularity": 1.0}
{"description": "Binary trees are defined recursively. A binary tree T is a structure defined on a finite set of nodes that either\n\n* contains no nodes, or\n* is composed of three disjoint sets of nodes:\n- a root node.\n- a binary tree called its left subtree.\n- a binary tree called its right subtree.\n\n\n\n\nYour task is to write a program which perform tree walks (systematically traverse all nodes in a tree) based on the following algorithms:\n\n1. Print the root, the left subtree and right subtree (preorder).\n2. Print the left subtree, the root and right subtree (inorder).\n3. Print the left subtree, right subtree and the root (postorder).\n\n\n\nHere, the given binary tree consists of n nodes and evey node has a unique ID from 0 to n-1.\n\nConstraints\n\n* 1 \u2264 n \u2264 25\n\nInput\n\nThe first line of the input includes an integer n, the number of nodes of the tree.\n\nIn the next n linen, the information of each node is given in the following format:\n\nid left right\n\nid is the node ID, left is ID of the left child and right is ID of the right child. If the node does not have the left (right) child, the left(right) is indicated by -1\n\nOutput\n\nIn the 1st line, print \"Preorder\", and in the 2nd line print a list of node IDs obtained by the preorder tree walk.\n\nIn the 3rd line, print \"Inorder\", and in the 4th line print a list of node IDs obtained by the inorder tree walk.\n\nIn the 5th line, print \"Postorder\", and in the 6th line print a list of node IDs obtained by the postorder tree walk.\n\nPrint a space character before each node ID.\n\nExample\n\nInput\n\n9\n0 1 4\n1 2 3\n2 -1 -1\n3 -1 -1\n4 5 8\n5 6 7\n6 -1 -1\n7 -1 -1\n8 -1 -1\n\n\nOutput\n\nPreorder\n 0 1 2 3 4 5 6 7 8\nInorder\n 2 1 3 0 6 5 7 4 8\nPostorder\n 2 3 1 6 7 5 8 4 0", "code": "n= int(input())\na = [list(map(int, input().split())) for _ in range(n)]\n\np = [-1]*n\nr = [-1]*n\nl = [-1]*n\n\nfor i in range(n):\n    ind = a[i][0]\n    r[ind] = a[i][2]\n    l[ind] = a[i][1]\n    if r[ind]>=0:\n        p[r[ind]] = ind\n    if l[ind]>=0:\n        p[l[ind]] = ind\n\nroot = -1\nfor i in range(n):\n    if p[i]==-1:\n        root = i\n        break\n\ndef preorder(ind):\n    print(' %i'%ind, end='')\n    if l[ind]!=-1:\n        preorder(l[ind])\n    if r[ind]!=-1:\n        preorder(r[ind])\n        \ndef inorder(ind):\n    if l[ind]!=-1:\n        inorder(l[ind])\n    print(' %i'%ind, end='')\n    if r[ind]!=-1:\n        inorder(r[ind])\n        \ndef postorder(ind):\n    if l[ind]!=-1:\n        postorder(l[ind])\n    if r[ind]!=-1:\n        postorder(r[ind])\n    print(' %i'%ind, end='')\n    \nprint('Preorder')\npreorder(root)\nprint()\nprint('Inorder')\ninorder(root)\nprint()\nprint('Postorder')\npostorder(root)\nprint()\n", "score_style": {"score_pep8": 0.5961538461538461, "score_style": 0.37585470085470085, "score_var": 0.15555555555555556}, "score_modularity": 1.0}
{"description": "There are N candles placed on a number line. The i-th candle from the left is placed on coordinate x_i. Here, x_1 < x_2 < ... < x_N holds.\n\nInitially, no candles are burning. Snuke decides to light K of the N candles.\n\nNow, he is at coordinate 0. He can move left and right along the line with speed 1. He can also light a candle when he is at the same position as the candle, in negligible time.\n\nFind the minimum time required to light K candles.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq K \\leq N\n* x_i is an integer.\n* |x_i| \\leq 10^8\n* x_1 < x_2 < ... < x_N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nx_1 x_2 ... x_N\n\n\nOutput\n\nPrint the minimum time required to light K candles.\n\nExamples\n\nInput\n\n5 3\n-30 -10 10 20 50\n\n\nOutput\n\n40\n\n\nInput\n\n3 2\n10 20 30\n\n\nOutput\n\n20\n\n\nInput\n\n1 1\n0\n\n\nOutput\n\n0\n\n\nInput\n\n8 5\n-9 -7 -4 -3 1 2 3 4\n\n\nOutput\n\n10", "code": "N,K=map(int,input().split())\nX=list(map(int,input().split()))\nans=float('inf')\nfor l in range(N-K+1):\n    r=l+K-1\n    ans=min(ans,min(abs(X[l]),abs(X[r]))+X[r]-X[l])\nprint(ans)", "score_style": {"score_pep8": 0.1428571428571429, "score_style": 0.1380952380952381, "score_var": 0.13333333333333333}, "score_modularity": 0.0}
{"description": "You are given an array a_1, a_2, ... , a_n. Array is good if for each pair of indexes i < j the condition j - a_j \u2260 i - a_i holds. Can you shuffle this array so that it becomes good? To shuffle an array means to reorder its elements arbitrarily (leaving the initial order is also an option).\n\nFor example, if a = [1, 1, 3, 5], then shuffled arrays [1, 3, 5, 1], [3, 5, 1, 1] and [5, 3, 1, 1] are good, but shuffled arrays [3, 1, 5, 1], [1, 1, 3, 5] and [1, 1, 5, 3] aren't.\n\nIt's guaranteed that it's always possible to shuffle an array to meet this condition.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe first line of each test case contains one integer n (1 \u2264 n \u2264 100) \u2014 the length of array a.\n\nThe second line of each test case contains n integers a_1, a_2, ... , a_n (1 \u2264 a_i \u2264 100).\n\nOutput\n\nFor each test case print the shuffled version of the array a which is good.\n\nExample\n\nInput\n\n\n3\n1\n7\n4\n1 1 3 5\n6\n3 2 1 5 6 4\n\n\nOutput\n\n\n7\n1 5 1 3\n2 4 6 1 3 5", "code": "for _ in range(int(input())):\n    n=int(input())\n    a=[*map(int,input().split())]\n    a.sort(reverse=True)\n    print(*a)", "score_style": {"score_pep8": 0.6, "score_style": 0.35, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "You are fed up with your messy room, so you decided to clean it up.\n\nYour room is a bracket sequence s=s_{1}s_{2}... s_{n} of length n. Each character of this string is either an opening bracket '(' or a closing bracket ')'.\n\nIn one operation you can choose any consecutive substring of s and reverse it. In other words, you can choose any substring s[l ... r]=s_l, s_{l+1}, ..., s_r and change the order of elements in it into s_r, s_{r-1}, ..., s_{l}.\n\nFor example, if you will decide to reverse substring s[2 ... 4] of string s=\"((()))\" it will be equal to s=\"()(())\".\n\nA regular (aka balanced) bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters '1' and '+' between the original characters of the sequence. For example, bracket sequences \"()()\", \"(())\" are regular (the resulting expressions are: \"(1)+(1)\", \"((1+1)+1)\"), and \")(\" and \"(\" are not.\n\nA prefix of a string s is a substring that starts at position 1. For example, for s=\"(())()\" there are 6 prefixes: \"(\", \"((\", \"(()\", \"(())\", \"(())(\" and \"(())()\".\n\nIn your opinion, a neat and clean room s is a bracket sequence that:\n\n  * the whole string s is a regular bracket sequence; \n  * and there are exactly k prefixes of this sequence which are regular (including whole s itself). \n\n\n\nFor example, if k = 2, then \"(())()\" is a neat and clean room.\n\nYou want to use at most n operations to make your room neat and clean. Operations are applied one after another sequentially.\n\nIt is guaranteed that the answer exists. Note that you do not need to minimize the number of operations: find any way to achieve the desired configuration in n or less operations.\n\nInput\n\nThe first line contains integer number t (1 \u2264 t \u2264 100) \u2014 the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains two integers n and k (1 \u2264 k \u2264 n/2, 2 \u2264 n \u2264 2000, n is even) \u2014 length of s and required number of regular prefixes.\n\nThe second line of a test case contains s of length n \u2014 the given bracket sequence. It contains only '(' and ')'.\n\nIt is guaranteed that there are exactly n/2 characters '(' and exactly n/2 characters ')' in the given string.\n\nThe sum of all values n over all the test cases in the input doesn't exceed 2000.\n\nOutput\n\nFor each test case print an answer.\n\nIn the first line print integer m (0 \u2264 m \u2264 n) \u2014 the number of operations. You do not need to minimize m, any value is suitable.\n\nIn the following m lines print description of the operations, each line should contain two integers l,r (1 \u2264 l \u2264 r \u2264 n), representing single reverse operation of s[l ... r]=s_{l}s_{l+1}... s_{r}. Operations are applied one after another sequentially.\n\nThe final s after all operations should be a regular, also it should be exactly k prefixes (including s) which are regular.\n\nIt is guaranteed that the answer exists. If there are several possible answers you can print any.\n\nExample\n\nInput\n\n\n4\n8 2\n()(())()\n10 3\n))()()()((\n2 1\n()\n2 1\n)(\n\n\nOutput\n\n\n4\n3 4\n1 1\n5 8\n2 2\n3\n4 10\n1 4\n6 7\n0\n1\n1 2\n\nNote\n\nIn the first example, the final sequence is \"()(()())\", where two prefixes are regular, \"()\" and \"()(()())\". Note, that all the operations except \"5 8\" in the example output are useless (they do not change s).", "code": "m = int(input())\nfor h in range(m):\n    n, b = map(int, input().split())\n    a = input()\n    t = 0\n    ans = []\n    while b != 1:\n        if a[t] == ')':\n            for i in range(t, n):\n                if a[i] == '(':\n                    k = i\n                    break\n            c = a[t:k + 1]\n            a = a[:t] + c[::-1]  + a[k + 1:]\n            \n            ans.append([t, k]) \n        if a[t + 1] == '(':\n            for i in range(t + 1, n):\n                if a[i] == ')':\n                    k = i\n                    break\n            c = a[t + 1:k + 1]\n            a = a[:t + 1] + c[::-1]  + a[k + 1:]\n            \n            ans.append([t + 1, k])\n        t += 2\n        b -= 1\n    for i in range(t, t + (n - t) // 2):\n        if a[i] == ')':\n            for j in range(i, n):\n                if a[j] == '(':\n                    k = j\n                    break\n            \n            c = a[i:k + 1]\n            a = a[:i] + c[::-1]  + a[k + 1:]\n            ans.append([i, k])\n    \n    for i in range(t + (n - t) // 2, n):\n        if a[i] == '(':\n            for j in range(i, n):\n                if a[j] == ')':\n                    k = j\n                    break\n            c = a[i:k + 1]\n            a = a[:i] + c[::-1] + a[k + 1:]\n            ans.append([i, k])\n            \n    print(len(ans))\n    for i in ans:\n        print(i[0] + 1, i[1] + 1)\n", "score_style": {"score_pep8": 0.8235294117647058, "score_style": 0.470855614973262, "score_var": 0.1181818181818182}, "score_modularity": 0.0}
{"description": "Generalized leap year\n\nNormally, whether or not the year x is a leap year is defined as follows.\n\n1. If x is a multiple of 400, it is a leap year.\n2. Otherwise, if x is a multiple of 100, it is not a leap year.\n3. Otherwise, if x is a multiple of 4, it is a leap year.\n4. If not, it is not a leap year.\n\n\n\nThis can be generalized as follows. For a sequence A1, ..., An, we define whether the year x is a \"generalized leap year\" as follows.\n\n1. For the smallest i (1 \u2264 i \u2264 n) such that x is a multiple of Ai, if i is odd, it is a generalized leap year, and if it is even, it is not a generalized leap year.\n2. When such i does not exist, it is not a generalized leap year if n is odd, but a generalized leap year if n is even.\n\n\n\nFor example, when A = [400, 100, 4], the generalized leap year for A is equivalent to a normal leap year.\n\nGiven the sequence A1, ..., An and the positive integers l, r. Answer the number of positive integers x such that l \u2264 x \u2264 r such that year x is a generalized leap year for A.\n\nInput\n\nThe input consists of up to 50 datasets. Each dataset is represented in the following format.\n\n> n l r A1 A2 ... An\n\nThe integer n satisfies 1 \u2264 n \u2264 50. The integers l and r satisfy 1 \u2264 l \u2264 r \u2264 4000. For each i, the integer Ai satisfies 1 \u2264 Ai \u2264 4000.\n\nThe end of the input is represented by a line of three zeros.\n\nOutput\n\nPrint the answer in one line for each dataset.\n\nSample Input\n\n\n3 1988 2014\n400\n100\nFour\n1 1000 1999\n1\n2 1111 3333\n2\n2\n6 2000 3000\nFive\n7\n11\n9\n3\n13\n0 0 0\n\n\nOutput for the Sample Input\n\n\n7\n1000\n2223\n785\n\n\n\n\n\n\nExample\n\nInput\n\n3 1988 2014\n400\n100\n4\n1 1000 1999\n1\n2 1111 3333\n2\n2\n6 2000 3000\n5\n7\n11\n9\n3\n13\n0 0 0\n\n\nOutput\n\n7\n1000\n2223\n785", "code": "\nwhile True:\n    \n\n    n,l,r = map(int,input().split())\n\n    ans = 0\n\n    if n == 0 and l == 0 and r == 0:\n        break\n\n    A = []\n\n    for i in range(n):\n\n        a = int(input())\n\n        A.append(a)\n\n\n    for x in range(r-l+1):\n\n        x += l\n\n        \n\n        for i in range(len(A)):\n\n            \n            flag = True\n\n            if x % A[i] == 0:\n\n                if i % 2 == 0:\n                    ans += 1\n                   \n\n\n                \n                flag = False\n                break\n\n        if flag and len(A) % 2 == 0:\n\n            \n\n            ans += 1\n\n\n    print (ans)\n", "score_style": {"score_pep8": 0.7346938775510203, "score_style": 0.44512471655328795, "score_var": 0.15555555555555556}, "score_modularity": 0.0}
{"description": "Lolek and Bolek are about to travel abroad by plane. The local airport has a special \"Choose Your Plane\" offer. The offer's conditions are as follows:\n\n  * it is up to a passenger to choose a plane to fly on; \n  * if the chosen plane has x (x > 0) empty seats at the given moment, then the ticket for such a plane costs x zlotys (units of Polish currency). \n\n\n\nThe only ticket office of the airport already has a queue of n passengers in front of it. Lolek and Bolek have not stood in the queue yet, but they are already wondering what is the maximum and the minimum number of zlotys the airport administration can earn if all n passengers buy tickets according to the conditions of this offer?\n\nThe passengers buy tickets in turn, the first person in the queue goes first, then goes the second one, and so on up to n-th person.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 1000) \u2014 the number of passengers in the queue and the number of planes in the airport, correspondingly. The next line contains m integers a1, a2, ..., am (1 \u2264 ai \u2264 1000) \u2014 ai stands for the number of empty seats in the i-th plane before the ticket office starts selling tickets.\n\nThe numbers in the lines are separated by a space. It is guaranteed that there are at least n empty seats in total.\n\nOutput\n\nPrint two integers \u2014 the maximum and the minimum number of zlotys that the airport administration can earn, correspondingly.\n\nExamples\n\nInput\n\n4 3\n2 1 1\n\n\nOutput\n\n5 5\n\n\nInput\n\n4 3\n2 2 2\n\n\nOutput\n\n7 6\n\nNote\n\nIn the first test sample the number of passengers is equal to the number of empty seats, so regardless of the way the planes are chosen, the administration will earn the same sum.\n\nIn the second sample the sum is maximized if the 1-st person in the queue buys a ticket to the 1-st plane, the 2-nd person \u2014 to the 2-nd plane, the 3-rd person \u2014 to the 3-rd plane, the 4-th person \u2014 to the 1-st plane. The sum is minimized if the 1-st person in the queue buys a ticket to the 1-st plane, the 2-nd person \u2014 to the 1-st plane, the 3-rd person \u2014 to the 2-nd plane, the 4-th person \u2014 to the 2-nd plane.", "code": "import heapq\nn,m  = map(int,input().split())\na = map(int,input().split())\n\nminh = []\nmaxh = []\n\nfor i in a:\n    heapq.heappush(minh,i)\n    heapq.heappush(maxh,-i)\n\nmincost = 0\nmaxcost = 0\n\nl=0\nwhile len(minh)>0 and l<n:\n    pr = heapq.heappop(minh)\n    mincost +=pr\n    if pr-1>0:\n        heapq.heappush(minh,pr-1)\n    l+=1\n\nl=0\nwhile len(maxh)>0 and l<n:\n    pr = -heapq.heappop(maxh)\n    maxcost +=pr\n    if pr-1>0:\n        heapq.heappush(maxh,-(pr-1))\n    l+=1\n\nprint(maxcost,end=\" \")\nprint(mincost)", "score_style": {"score_pep8": 0.46875, "score_style": 0.379375, "score_var": 0.29}, "score_modularity": 0.0}
{"description": "A number is ternary if it contains only digits 0, 1 and 2. For example, the following numbers are ternary: 1022, 11, 21, 2002.\n\nYou are given a long ternary number x. The first (leftmost) digit of x is guaranteed to be 2, the other digits of x can be 0, 1 or 2.\n\nLet's define the ternary XOR operation \u2299 of two ternary numbers a and b (both of length n) as a number c = a \u2299 b of length n, where c_i = (a_i + b_i) \\% 3 (where \\% is modulo operation). In other words, add the corresponding digits and take the remainders of the sums when divided by 3. For example, 10222 \u2299 11021 = 21210.\n\nYour task is to find such ternary numbers a and b both of length n and both without leading zeros that a \u2299 b = x and max(a, b) is the minimum possible.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n (1 \u2264 n \u2264 5 \u22c5 10^4) \u2014 the length of x. The second line of the test case contains ternary number x consisting of n digits 0, 1 or 2. It is guaranteed that the first digit of x is 2. It is guaranteed that the sum of n over all test cases does not exceed 5 \u22c5 10^4 (\u2211 n \u2264 5 \u22c5 10^4).\n\nOutput\n\nFor each test case, print the answer \u2014 two ternary integers a and b both of length n and both without leading zeros such that a \u2299 b = x and max(a, b) is the minimum possible. If there are several answers, you can print any.\n\nExample\n\nInput\n\n\n4\n5\n22222\n5\n21211\n1\n2\n9\n220222021\n\n\nOutput\n\n\n11111\n11111\n11000\n10211\n1\n1\n110111011\n110111010", "code": "t = int(input())\nfor test in range(t):\n    n = int(input())\n    ter = [int(i) for i in list(input())]\n    ans1 = [0 for i in range(n)]\n    ans2 = [0 for i in range(n)]\n    maxgiven = 0\n    for i in range(n):\n        if maxgiven == 0:\n            if ter[i]==0:\n                ans1[i], ans2[i] = (0,0)\n            if ter[i]==2:\n                ans1[i], ans2[i] = (1,1)\n            if ter[i]==1:\n                ans1[i], ans2[i] = (1,0)\n                maxgiven = 1\n        else:\n            if ter[i]==0:\n                ans1[i], ans2[i] = (0,0)\n            if ter[i]==2:\n                ans1[i], ans2[i] = (0,2)\n            if ter[i]==1:\n                ans1[i], ans2[i] = (0,1)\n    ans1 = [str(i) for i in ans1]\n    ans2 = [str(i) for i in ans2]\n    print(int(''.join(ans1)))\n    print(int(''.join(ans2)))\n", "score_style": {"score_pep8": 0.5555555555555556, "score_style": 0.44027777777777777, "score_var": 0.325}, "score_modularity": 0.0}
{"description": "Vasiliy lives at point (a, b) of the coordinate plane. He is hurrying up to work so he wants to get out of his house as soon as possible. New app suggested n available Beru-taxi nearby. The i-th taxi is located at point (xi, yi) and moves with a speed vi. \n\nConsider that each of n drivers will move directly to Vasiliy and with a maximum possible speed. Compute the minimum time when Vasiliy will get in any of Beru-taxi cars.\n\nInput\n\nThe first line of the input contains two integers a and b ( - 100 \u2264 a, b \u2264 100) \u2014 coordinates of Vasiliy's home.\n\nThe second line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of available Beru-taxi cars nearby. \n\nThe i-th of the following n lines contains three integers xi, yi and vi ( - 100 \u2264 xi, yi \u2264 100, 1 \u2264 vi \u2264 100) \u2014 the coordinates of the i-th car and its speed.\n\nIt's allowed that several cars are located at the same point. Also, cars may be located at exactly the same point where Vasiliy lives.\n\nOutput\n\nPrint a single real value \u2014 the minimum time Vasiliy needs to get in any of the Beru-taxi cars. You answer will be considered correct if its absolute or relative error does not exceed 10 - 6. \n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if <image>.\n\nExamples\n\nInput\n\n0 0\n2\n2 0 1\n0 2 2\n\n\nOutput\n\n1.00000000000000000000\n\nInput\n\n1 3\n3\n3 3 2\n-2 3 6\n-2 7 10\n\n\nOutput\n\n0.50000000000000000000\n\nNote\n\nIn the first sample, first taxi will get to Vasiliy in time 2, and second will do this in time 1, therefore 1 is the answer.\n\nIn the second sample, cars 2 and 3 will arrive simultaneously.", "code": "import math\nhomex, homey = [int(i) for i in input().split()]\namount = int(input())\nmintime = 400\nfor i in range(amount):\n\tx, y, v = [int(i) for i in input().split()]\n\tdist = math.sqrt((x-homex)**2 + (y-homey)**2)\n\tif dist/v < mintime:\n\t\tmintime = dist/v\nprint(mintime)", "score_style": {"score_pep8": 0.6, "score_style": 0.4722222222222222, "score_var": 0.34444444444444444}, "score_modularity": 0.0}
{"description": "Vasya has n pairs of socks. In the morning of each day Vasya has to put on a pair of socks before he goes to school. When he comes home in the evening, Vasya takes off the used socks and throws them away. Every m-th day (at days with numbers m, 2m, 3m, ...) mom buys a pair of socks to Vasya. She does it late in the evening, so that Vasya cannot put on a new pair of socks before the next day. How many consecutive days pass until Vasya runs out of socks?\n\nInput\n\nThe single line contains two integers n and m (1 \u2264 n \u2264 100; 2 \u2264 m \u2264 100), separated by a space.\n\nOutput\n\nPrint a single integer \u2014 the answer to the problem.\n\nExamples\n\nInput\n\n2 2\n\n\nOutput\n\n3\n\n\nInput\n\n9 3\n\n\nOutput\n\n13\n\nNote\n\nIn the first sample Vasya spends the first two days wearing the socks that he had initially. Then on day three he puts on the socks that were bought on day two.\n\nIn the second sample Vasya spends the first nine days wearing the socks that he had initially. Then he spends three days wearing the socks that were bought on the third, sixth and ninth days. Than he spends another day wearing the socks that were bought on the twelfth day.", "code": "a=list(map(int,input().split()))\nsock=a[0]\nk=0\nday=0\nwhile True:\n    sock-=1\n    day+=1\n    if day%a[1]==0:\n        sock+=1\n    if sock==0:\n        break\nprint(day)\n", "score_style": {"score_pep8": 0.25, "score_style": 0.2375, "score_var": 0.225}, "score_modularity": 0.0}
{"description": "You are given a set of n segments on the axis Ox, each segment has integer endpoints between 1 and m inclusive. Segments may intersect, overlap or even coincide with each other. Each segment is characterized by two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 m) \u2014 coordinates of the left and of the right endpoints. \n\nConsider all integer points between 1 and m inclusive. Your task is to print all such points that don't belong to any segment. The point x belongs to the segment [l; r] if and only if l \u2264 x \u2264 r.\n\nInput\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 100) \u2014 the number of segments and the upper bound for coordinates.\n\nThe next n lines contain two integers each l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 m) \u2014 the endpoints of the i-th segment. Segments may intersect, overlap or even coincide with each other. Note, it is possible that l_i=r_i, i.e. a segment can degenerate to a point.\n\nOutput\n\nIn the first line print one integer k \u2014 the number of points that don't belong to any segment.\n\nIn the second line print exactly k integers in any order \u2014 the points that don't belong to any segment. All points you print should be distinct.\n\nIf there are no such points at all, print a single integer 0 in the first line and either leave the second line empty or do not print it at all.\n\nExamples\n\nInput\n\n3 5\n2 2\n1 2\n5 5\n\n\nOutput\n\n2\n3 4 \n\n\nInput\n\n1 7\n1 7\n\n\nOutput\n\n0\n\nNote\n\nIn the first example the point 1 belongs to the second segment, the point 2 belongs to the first and the second segments and the point 5 belongs to the third segment. The points 3 and 4 do not belong to any segment.\n\nIn the second example all the points from 1 to 7 belong to the first segment.", "code": "n,m=map(int,input().split())\ns=list(range(1,m+1))\nfor i in range(n):\n    x,y=map(int,input().split())\n    for i in range(x,y+1):\n        if i in s:\n            s.remove(i)\nprint(len(s))\nfor h in range(len(s)):\n    print(s[h],end=' ')\n\n", "score_style": {"score_pep8": 0.5, "score_style": 0.3, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Given is a string S. Let T be the concatenation of K copies of S. We can repeatedly perform the following operation: choose a character in T and replace it with a different character. Find the minimum number of operations required to satisfy the following condition: any two adjacent characters in T are different.\n\nConstraints\n\n* 1 \\leq |S| \\leq 100\n* S consists of lowercase English letters.\n* 1 \\leq K \\leq 10^9\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nK\n\n\nOutput\n\nPrint the minimum number of operations required.\n\nExamples\n\nInput\n\nissii\n2\n\n\nOutput\n\n4\n\n\nInput\n\nqq\n81\n\n\nOutput\n\n81\n\n\nInput\n\ncooooooooonteeeeeeeeeest\n999993333\n\n\nOutput\n\n8999939997", "code": "S = list(input())\nK = int(input())\n\nif len(set(S)) == 1:\n    print(len(S)*K //2)\nelse:\n    cnt = [1]\n    for i in range(len(S)-1):\n        if S[i] == S[i+1]:\n            cnt[-1] += 1\n        else:\n            cnt.append(1)\n    \n    res = 0\n    for c in cnt:\n        res += c//2*K\n\n    if S[0] == S[-1]:\n        if (cnt[0]+cnt[-1])%2 == 0:\n            res += K-1\n    \n    print(res)", "score_style": {"score_pep8": 0.8181818181818181, "score_style": 0.49242424242424243, "score_var": 0.16666666666666669}, "score_modularity": 0.0}
{"description": "Little Vasya loves orange juice very much. That's why any food and drink in his kitchen necessarily contains orange juice. There are n drinks in his fridge, the volume fraction of orange juice in the i-th drink equals pi percent.\n\nOne day Vasya decided to make himself an orange cocktail. He took equal proportions of each of the n drinks and mixed them. Then he wondered, how much orange juice the cocktail has.\n\nFind the volume fraction of orange juice in the final drink.\n\nInput\n\nThe first input line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of orange-containing drinks in Vasya's fridge. The second line contains n integers pi (0 \u2264 pi \u2264 100) \u2014 the volume fraction of orange juice in the i-th drink, in percent. The numbers are separated by a space.\n\nOutput\n\nPrint the volume fraction in percent of orange juice in Vasya's cocktail. The answer will be considered correct if the absolute or relative error does not exceed 10  - 4.\n\nExamples\n\nInput\n\n3\n50 50 100\n\n\nOutput\n\n66.666666666667\n\n\nInput\n\n4\n0 25 50 75\n\n\nOutput\n\n37.500000000000\n\nNote\n\nNote to the first sample: let's assume that Vasya takes x milliliters of each drink from the fridge. Then the volume of pure juice in the cocktail will equal <image> milliliters. The total cocktail's volume equals 3\u00b7x milliliters, so the volume fraction of the juice in the cocktail equals <image>, that is, 66.(6) percent.", "code": "n = input()\np = input().split()\nresult = 0\n\nfor i in p:\n\tresult += int(i)/100\n\nprint(result/int(n)*100)", "score_style": {"score_pep8": 0.875, "score_style": 0.55, "score_var": 0.225}, "score_modularity": 0.0}
{"description": "A permutation of length n is a sequence of integers from 1 to n of length n containing each number exactly once. For example, [1], [4, 3, 5, 1, 2], [3, 2, 1] are permutations, and [1, 1], [0, 1], [2, 2, 1, 4] are not.\n\nThere was a permutation p[1 ... n]. It was merged with itself. In other words, let's take two instances of p and insert elements of the second p into the first maintaining relative order of elements. The result is a sequence of the length 2n.\n\nFor example, if p=[3, 1, 2] some possible results are: [3, 1, 2, 3, 1, 2], [3, 3, 1, 1, 2, 2], [3, 1, 3, 1, 2, 2]. The following sequences are not possible results of a merging: [1, 3, 2, 1, 2, 3], [3, 1, 2, 3, 2, 1], [3, 3, 1, 2, 2, 1].\n\nFor example, if p=[2, 1] the possible results are: [2, 2, 1, 1], [2, 1, 2, 1]. The following sequences are not possible results of a merging: [1, 1, 2, 2], [2, 1, 1, 2], [1, 2, 2, 1].\n\nYour task is to restore the permutation p by the given resulting sequence a. It is guaranteed that the answer exists and is unique.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 400) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 50) \u2014 the length of permutation. The second line of the test case contains 2n integers a_1, a_2, ..., a_{2n} (1 \u2264 a_i \u2264 n), where a_i is the i-th element of a. It is guaranteed that the array a represents the result of merging of some permutation p with the same permutation p.\n\nOutput\n\nFor each test case, print the answer: n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n), representing the initial permutation. It is guaranteed that the answer exists and is unique.\n\nExample\n\nInput\n\n\n5\n2\n1 1 2 2\n4\n1 3 1 4 3 4 2 2\n5\n1 2 1 2 3 4 3 5 4 5\n3\n1 2 3 1 2 3\n4\n2 3 2 4 1 3 4 1\n\n\nOutput\n\n\n1 2 \n1 3 4 2 \n1 2 3 4 5 \n1 2 3 \n2 3 4 1 ", "code": "t=int(input())\nwhile t:\n    n = int(input())\n    s = list(map(int,input().split()))\n    c=[]\n    for i in s:\n        if i not in c:\n            c.append(i)\n\n    print(*c)\n    t-=1", "score_style": {"score_pep8": 0.6363636363636364, "score_style": 0.36818181818181817, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "A railroad running from west to east in Atcoder Kingdom is now complete.\n\nThere are N stations on the railroad, numbered 1 through N from west to east.\n\nTomorrow, the opening ceremony of the railroad will take place.\n\nOn this railroad, for each integer i such that 1\u2264i\u2264N-1, there will be trains that run from Station i to Station i+1 in C_i seconds. No other trains will be operated.\n\nThe first train from Station i to Station i+1 will depart Station i S_i seconds after the ceremony begins. Thereafter, there will be a train that departs Station i every F_i seconds.\n\nHere, it is guaranteed that F_i divides S_i.\n\nThat is, for each Time t satisfying S_i\u2264t and t\uff05F_i=0, there will be a train that departs Station i t seconds after the ceremony begins and arrives at Station i+1 t+C_i seconds after the ceremony begins, where A\uff05B denotes A modulo B, and there will be no other trains.\n\nFor each i, find the earliest possible time we can reach Station N if we are at Station i when the ceremony begins, ignoring the time needed to change trains.\n\nConstraints\n\n* 1\u2264N\u2264500\n* 1\u2264C_i\u2264100\n* 1\u2264S_i\u226410^5\n* 1\u2264F_i\u226410\n* S_i\uff05F_i=0\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nC_1 S_1 F_1\n:\nC_{N-1} S_{N-1} F_{N-1}\n\n\nOutput\n\nPrint N lines. Assuming that we are at Station i (1\u2264i\u2264N) when the ceremony begins, if the earliest possible time we can reach Station N is x seconds after the ceremony begins, the i-th line should contain x.\n\nExamples\n\nInput\n\n3\n6 5 1\n1 10 1\n\n\nOutput\n\n12\n11\n0\n\n\nInput\n\n4\n12 24 6\n52 16 4\n99 2 2\n\n\nOutput\n\n187\n167\n101\n0\n\n\nInput\n\n4\n12 13 1\n44 17 17\n66 4096 64\n\n\nOutput\n\n4162\n4162\n4162\n0", "code": "N=int(input())\nans=[0]*N\ndef nex(a,ls):\n  x=(-a)%ls[2]\n  return max([ls[1],a+x])+ls[0]\nM=N-1\nfor i in range(M):\n  station=[int(s) for s in input().split()]\n  for j in range(i+1):\n    ans[j]=nex(ans[j],station)\nfor e in ans:\n  print(e)", "score_style": {"score_pep8": 0.16666666666666663, "score_style": 0.17424242424242423, "score_var": 0.18181818181818182}, "score_modularity": 1.0}
{"description": "Polycarp is preparing the first programming contest for robots. There are n problems in it, and a lot of robots are going to participate in it. Each robot solving the problem i gets p_i points, and the score of each robot in the competition is calculated as the sum of p_i over all problems i solved by it. For each problem, p_i is an integer not less than 1.\n\nTwo corporations specializing in problem-solving robot manufacturing, \"Robo-Coder Inc.\" and \"BionicSolver Industries\", are going to register two robots (one for each corporation) for participation as well. Polycarp knows the advantages and flaws of robots produced by these companies, so, for each problem, he knows precisely whether each robot will solve it during the competition. Knowing this, he can try predicting the results \u2014 or manipulating them. \n\nFor some reason (which absolutely cannot involve bribing), Polycarp wants the \"Robo-Coder Inc.\" robot to outperform the \"BionicSolver Industries\" robot in the competition. Polycarp wants to set the values of p_i in such a way that the \"Robo-Coder Inc.\" robot gets strictly more points than the \"BionicSolver Industries\" robot. However, if the values of p_i will be large, it may look very suspicious \u2014 so Polycarp wants to minimize the maximum value of p_i over all problems. Can you help Polycarp to determine the minimum possible upper bound on the number of points given for solving the problems?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of problems.\n\nThe second line contains n integers r_1, r_2, ..., r_n (0 \u2264 r_i \u2264 1). r_i = 1 means that the \"Robo-Coder Inc.\" robot will solve the i-th problem, r_i = 0 means that it won't solve the i-th problem.\n\nThe third line contains n integers b_1, b_2, ..., b_n (0 \u2264 b_i \u2264 1). b_i = 1 means that the \"BionicSolver Industries\" robot will solve the i-th problem, b_i = 0 means that it won't solve the i-th problem.\n\nOutput\n\nIf \"Robo-Coder Inc.\" robot cannot outperform the \"BionicSolver Industries\" robot by any means, print one integer -1.\n\nOtherwise, print the minimum possible value of max _{i = 1}^{n} p_i, if all values of p_i are set in such a way that the \"Robo-Coder Inc.\" robot gets strictly more points than the \"BionicSolver Industries\" robot.\n\nExamples\n\nInput\n\n\n5\n1 1 1 0 0\n0 1 1 1 1\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n3\n0 0 0\n0 0 0\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n4\n1 1 1 1\n1 1 1 1\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n9\n1 0 0 0 0 0 0 0 1\n0 1 1 0 1 1 1 1 0\n\n\nOutput\n\n\n4\n\nNote\n\nIn the first example, one of the valid score assignments is p = [3, 1, 3, 1, 1]. Then the \"Robo-Coder\" gets 7 points, the \"BionicSolver\" \u2014 6 points.\n\nIn the second example, both robots get 0 points, and the score distribution does not matter.\n\nIn the third example, both robots solve all problems, so their points are equal.", "code": "from math import *\nsInt = lambda: int(input())\nmInt = lambda: map(int, input().split())\nlInt = lambda: list(map(int, input().split()))\n\nn = sInt()\na = lInt()\nb = lInt()\nans = 0\nval = 0\nfor i in range(n):\n    if a[i]==b[i]:\n        pass\n    elif a[i]>b[i]:\n        val += 1\n    else:\n        ans += 1\nif val == 0:\n    print(-1)\nelse:\n    print(ans//val+1)\n\n\n\n", "score_style": {"score_pep8": 0.7142857142857143, "score_style": 0.4793650793650794, "score_var": 0.24444444444444446}, "score_modularity": 0.0}
{"description": "Takahashi is standing on a multiplication table with infinitely many rows and columns.\n\nThe square (i,j) contains the integer i \\times j. Initially, Takahashi is standing at (1,1).\n\nIn one move, he can move from (i,j) to either (i+1,j) or (i,j+1).\n\nGiven an integer N, find the minimum number of moves needed to reach a square that contains N.\n\nConstraints\n\n* 2 \\leq N \\leq 10^{12}\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the minimum number of moves needed to reach a square that contains the integer N.\n\nExamples\n\nInput\n\n10\n\n\nOutput\n\n5\n\n\nInput\n\n50\n\n\nOutput\n\n13\n\n\nInput\n\n10000000019\n\n\nOutput\n\n10000000018", "code": "N=int(input())\nprint(min([sum([i-1,round(N/i)-1]) for i in range(1,int(N**0.5)+1) if N%i==0]))\n", "score_style": {"score_pep8": 0.0, "score_style": 0.05, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Having learned the multiplication table, Takahashi can multiply two integers between 1 and 9 (inclusive) together.\n\nGiven an integer N, determine whether N can be represented as the product of two integers between 1 and 9. If it can, print `Yes`; if it cannot, print `No`.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nIf N can be represented as the product of two integers between 1 and 9 (inclusive), print `Yes`; if it cannot, print `No`.\n\nExamples\n\nInput\n\n10\n\n\nOutput\n\nYes\n\n\nInput\n\n50\n\n\nOutput\n\nNo\n\n\nInput\n\n81\n\n\nOutput\n\nYes", "code": "N=int(input())\nc='No'\nfor n in range(1,10):\n    if N%n==0 and 1<=N//n<=9:\n        c='Yes'\n        break\nprint(c)", "score_style": {"score_pep8": 0.2857142857142857, "score_style": 0.19285714285714284, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "When Valera has got some free time, he goes to the library to read some books. Today he's got t free minutes to read. That's why Valera took n books in the library and for each book he estimated the time he is going to need to read it. Let's number the books by integers from 1 to n. Valera needs ai minutes to read the i-th book.\n\nValera decided to choose an arbitrary book with number i and read the books one by one, starting from this book. In other words, he will first read book number i, then book number i + 1, then book number i + 2 and so on. He continues the process until he either runs out of the free time or finishes reading the n-th book. Valera reads each book up to the end, that is, he doesn't start reading the book if he doesn't have enough free time to finish reading it. \n\nPrint the maximum number of books Valera can read.\n\nInput\n\nThe first line contains two integers n and t (1 \u2264 n \u2264 105; 1 \u2264 t \u2264 109) \u2014 the number of books and the number of free minutes Valera's got. The second line contains a sequence of n integers a1, a2, ..., an (1 \u2264 ai \u2264 104), where number ai shows the number of minutes that the boy needs to read the i-th book.\n\nOutput\n\nPrint a single integer \u2014 the maximum number of books Valera can read.\n\nExamples\n\nInput\n\n4 5\n3 1 2 1\n\n\nOutput\n\n3\n\n\nInput\n\n3 3\n2 2 3\n\n\nOutput\n\n1", "code": "\n\nfrom sys import stdin, stdout\nimport heapq\nfrom collections import Counter, deque\nfrom math import inf\n\ndef get_max_book_which_can_be_read(n, t, a) -> int:\n    \n\n    max_book_read = 0\n\n    window_start = 0\n    window_end = 0\n\n    current_sum = 0\n\n    for window_end, element in enumerate(a):\n        current_sum += element\n        if current_sum > t:\n            current_sum -= a[window_start]\n            window_start += 1\n        else:\n            max_book_read = max(max_book_read, window_end - window_start + 1)\n\n    return max_book_read\n\n\n\n\ndef main():\n    \n    \n    n, t = map(int, stdin.readline().split(\" \"))\n\n    \n    a = list(map(int, stdin.readline().split(\" \")))\n\n    stdout.write(f\"{get_max_book_which_can_be_read(n, t, a)}\\n\")\n\nif __name__ == \"__main__\":\n    main()", "score_style": {"score_pep8": 0.675, "score_style": 0.6875, "score_var": 0.7}, "score_modularity": 1.0}
{"description": "Having learned the multiplication table, Takahashi can multiply two integers between 1 and 9 (inclusive) together. He cannot do any other calculation.\n\nGiven are two integers A and B.\n\nIf Takahashi can calculate A \\times B, print the result; if he cannot, print `-1` instead.\n\nConstraints\n\n* 1 \\leq A \\leq 20\n* 1 \\leq B \\leq 20\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B\n\n\nOutput\n\nIf Takahashi can calculate A \\times B, print the result; if he cannot, print `-1`.\n\nExamples\n\nInput\n\n2 5\n\n\nOutput\n\n10\n\n\nInput\n\n5 10\n\n\nOutput\n\n-1\n\n\nInput\n\n9 9\n\n\nOutput\n\n81", "code": "a,b=map(int,input().split());print(-1 if max(a,b)>9 else a*b)", "score_style": {"score_pep8": 0.0, "score_style": 0.05, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Given a permutation p of length n, find its subsequence s_1, s_2, \u2026, s_k of length at least 2 such that:\n\n  * |s_1-s_2|+|s_2-s_3|+\u2026+|s_{k-1}-s_k| is as big as possible over all subsequences of p with length at least 2. \n  * Among all such subsequences, choose the one whose length, k, is as small as possible. \n\n\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\nA sequence a is a subsequence of an array b if a can be obtained from b by deleting some (possibly, zero or all) elements.\n\nA permutation of length n is an array of length n in which every element from 1 to n occurs exactly once.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (2 \u2264 n \u2264 10^5) \u2014 the length of the permutation p.\n\nThe second line of each test case contains n integers p_1, p_2, \u2026, p_{n} (1 \u2264 p_i \u2264 n, p_i are distinct) \u2014 the elements of the permutation p.\n\nThe sum of n across the test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, the first line should contain the length of the found subsequence, k. The second line should contain s_1, s_2, \u2026, s_k \u2014 its elements.\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\nExample\n\nInput\n\n\n2\n3\n3 2 1\n4\n1 3 4 2\n\n\nOutput\n\n\n2\n3 1 \n3\n1 4 2 \n\nNote\n\nIn the first test case, there are 4 subsequences of length at least 2:\n\n  * [3,2] which gives us |3-2|=1. \n  * [3,1] which gives us |3-1|=2. \n  * [2,1] which gives us |2-1|=1. \n  * [3,2,1] which gives us |3-2|+|2-1|=2. \n\n\n\nSo the answer is either [3,1] or [3,2,1]. Since we want the subsequence to be as short as possible, the answer is [3,1].", "code": "t=int(input())\nfor i in range(t):\n    l=[]\n    f=0\n    n=int(input())\n    a=[int(i) for i in input().split()]\n    \n    temp=a[0]\n    l.append(temp)\n    \n    if(a[0]<a[1]):\n        f=0\n    else:\n        f=1\n    for j in range(n-1):\n       if(temp<a[j+1]):\n           if(f==0):\n            temp=a[j+1]\n           else:\n            f=0\n            l.append(a[j])\n            temp=a[j+1]\n       else:\n           if(f==1):\n            temp=a[j+1]\n           else:\n            f=1\n            l.append(a[j])\n            temp=a[j+1]\n    \n    l.append(temp)\n            \n    print(len(l),end='\\n')\n    for i in l:\n        print(i,end=' ')\n    print(end='\\n')", "score_style": {"score_pep8": 0.25, "score_style": 0.19375, "score_var": 0.1375}, "score_modularity": 0.0}
{"description": "You are given n strings s_1, s_2, \u2026, s_n consisting of lowercase Latin letters.\n\nIn one operation you can remove a character from a string s_i and insert it to an arbitrary position in a string s_j (j may be equal to i). You may perform this operation any number of times. Is it possible to make all n strings equal?\n\nInput\n\nThe first line contains t (1 \u2264 t \u2264 10): the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 1000): the number of strings.\n\nn lines follow, the i-th line contains s_i (1 \u2264 \\lvert s_i \\rvert \u2264 1000).\n\nThe sum of lengths of all strings in all test cases does not exceed 1000.\n\nOutput\n\nIf it is possible to make the strings equal, print \"YES\" (without quotes).\n\nOtherwise, print \"NO\" (without quotes).\n\nYou can output each character in either lowercase or uppercase.\n\nExample\n\nInput\n\n\n4\n2\ncaa\ncbb\n3\ncba\ncba\ncbb\n4\nccab\ncbac\nbca\nacbcc\n4\nacb\ncaf\nc\ncbafc\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\n\nNote\n\nIn the first test case, you can do the following: \n\n  * Remove the third character of the first string and insert it after the second character of the second string, making the two strings \"ca\" and \"cbab\" respectively.\n  * Remove the second character of the second string and insert it after the second character of the first string, making both strings equal to \"cab\". \n\n\n\nIn the second test case, it is impossible to make all n strings equal.", "code": "mod = 10**9+7\n\ndef func():\n\tn = int(input())\n\tarr = [0 for i in range(26)]\n\tfor i in range(n):\n\t\ts = input()\n\t\tfor j in s:\n\t\t\tarr[ord(j)-97]+=1\n\tfor i in range(26):\n\t\tif (arr[i]%n != 0):\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\tprint(\"YES\")\n\nfor _ in range(int(input())):\n\tfunc()", "score_style": {"score_pep8": 0.17647058823529416, "score_style": 0.16680672268907565, "score_var": 0.15714285714285714}, "score_modularity": 0.0}
{"description": "Being a nonconformist, Volodya is displeased with the current state of things, particularly with the order of natural numbers (natural number is positive integer number). He is determined to rearrange them. But there are too many natural numbers, so Volodya decided to start with the first n. He writes down the following sequence of numbers: firstly all odd integers from 1 to n (in ascending order), then all even integers from 1 to n (also in ascending order). Help our hero to find out which number will stand at the position number k.\n\nInput\n\nThe only line of input contains integers n and k (1 \u2264 k \u2264 n \u2264 1012).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nOutput\n\nPrint the number that will stand at the position number k after Volodya's manipulations.\n\nExamples\n\nInput\n\n10 3\n\n\nOutput\n\n5\n\nInput\n\n7 7\n\n\nOutput\n\n6\n\nNote\n\nIn the first sample Volodya's sequence will look like this: {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}. The third place in the sequence is therefore occupied by the number 5.", "code": "n,k=map(int,input().split())\n\nmid=0\nif n%2==0:\n    mid=n/2\nelse:\n    mid=(n+1)/2\nif(mid>=k):\n    print(int((2*k)-1))\nelse:\n    print(int(2*(k-mid)))\n    ", "score_style": {"score_pep8": 0.4545454545454546, "score_style": 0.31060606060606066, "score_var": 0.16666666666666669}, "score_modularity": 0.0}
{"description": "AtCoder Inc. holds a contest every Saturday.\n\nThere are two types of contests called ABC and ARC, and just one of them is held at a time.\n\nThe company holds these two types of contests alternately: an ARC follows an ABC and vice versa.\n\nGiven a string S representing the type of the contest held last week, print the string representing the type of the contest held this week.\n\nConstraints\n\n* S is `ABC` or `ARC`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nPrint the string representing the type of the contest held this week.\n\nExample\n\nInput\n\nABC\n\n\nOutput\n\nARC", "code": "print('ARC' if input()[1]=='B' else 'ABC')", "score_style": {"score_pep8": 0.0, "score_style": 0.0, "score_var": 0.0}, "score_modularity": 0.0}
{"description": "For a positive integer X, let f(X) be the number of positive divisors of X.\n\nGiven a positive integer N, find \\sum_{K=1}^N K\\times f(K).\n\nConstraints\n\n* 1 \\leq N \\leq 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the value \\sum_{K=1}^N K\\times f(K).\n\nExamples\n\nInput\n\n4\n\n\nOutput\n\n23\n\n\nInput\n\n100\n\n\nOutput\n\n26879\n\n\nInput\n\n10000000\n\n\nOutput\n\n838627288460105", "code": "N = int(input())\n\nt = 0\nfor j in range(1,N+1):\n  m = N//j\n  t += (1+m)*m//2 * j\n\nprint(t)\n", "score_style": {"score_pep8": 0.625, "score_style": 0.3625, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Little girl Tanya is learning how to decrease a number by one, but she does it wrong with a number consisting of two or more digits. Tanya subtracts one from a number by the following algorithm:\n\n  * if the last digit of the number is non-zero, she decreases the number by one; \n  * if the last digit of the number is zero, she divides the number by 10 (i.e. removes the last digit). \n\n\n\nYou are given an integer number n. Tanya will subtract one from it k times. Your task is to print the result after all k subtractions.\n\nIt is guaranteed that the result will be positive integer number.\n\nInput\n\nThe first line of the input contains two integer numbers n and k (2 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 50) \u2014 the number from which Tanya will subtract and the number of subtractions correspondingly.\n\nOutput\n\nPrint one integer number \u2014 the result of the decreasing n by one k times.\n\nIt is guaranteed that the result will be positive integer number. \n\nExamples\n\nInput\n\n512 4\n\n\nOutput\n\n50\n\n\nInput\n\n1000000000 9\n\n\nOutput\n\n1\n\nNote\n\nThe first example corresponds to the following sequence: 512 \u2192 511 \u2192 510 \u2192 51 \u2192 50.", "code": "lst = [int(x) for x in input().split()]\nn = lst[0]\nk = lst[1]\n\nfor i in range(k):\n    string = str(n)\n    if (int(string[len(string) - 1]) != 0):\n        n -= 1\n    else:\n        n //= 10\n\nprint(n)\n", "score_style": {"score_pep8": 1.0, "score_style": 0.6083333333333333, "score_var": 0.21666666666666665}, "score_modularity": 0.0}
{"description": "Ann has recently started commuting by subway. We know that a one ride subway ticket costs a rubles. Besides, Ann found out that she can buy a special ticket for m rides (she can buy it several times). It costs b rubles. Ann did the math; she will need to use subway n times. Help Ann, tell her what is the minimum sum of money she will have to spend to make n rides?\n\nInput\n\nThe single line contains four space-separated integers n, m, a, b (1 \u2264 n, m, a, b \u2264 1000) \u2014 the number of rides Ann has planned, the number of rides covered by the m ride ticket, the price of a one ride ticket and the price of an m ride ticket. \n\nOutput\n\nPrint a single integer \u2014 the minimum sum in rubles that Ann will need to spend.\n\nExamples\n\nInput\n\n6 2 1 2\n\n\nOutput\n\n6\n\n\nInput\n\n5 2 2 3\n\n\nOutput\n\n8\n\nNote\n\nIn the first sample one of the optimal solutions is: each time buy a one ride ticket. There are other optimal solutions. For example, buy three m ride tickets.", "code": "n, m, a, b = [int(i) for i in input().split()]\nif a*m <= b:\n\tprint(a*n)\nelse:\n\tif int(n/m)*b + a*(n%m) < ((int(n/m)+1)*b):\n\t\tprint(int(n/m)*b + a*(n%m))\n\telse:\n\t\tprint((int(n/m)+1)*b)", "score_style": {"score_pep8": 0.375, "score_style": 0.2375, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Ujan decided to make a new wooden roof for the house. He has n rectangular planks numbered from 1 to n. The i-th plank has size a_i \u00d7 1 (that is, the width is 1 and the height is a_i).\n\nNow, Ujan wants to make a square roof. He will first choose some of the planks and place them side by side in some order. Then he will glue together all of these planks by their vertical sides. Finally, he will cut out a square from the resulting shape in such a way that the sides of the square are horizontal and vertical.\n\nFor example, if Ujan had planks with lengths 4, 3, 1, 4 and 5, he could choose planks with lengths 4, 3 and 5. Then he can cut out a 3 \u00d7 3 square, which is the maximum possible. Note that this is not the only way he can obtain a 3 \u00d7 3 square.\n\n<image>\n\nWhat is the maximum side length of the square Ujan can get?\n\nInput\n\nThe first line of input contains a single integer k (1 \u2264 k \u2264 10), the number of test cases in the input.\n\nFor each test case, the first line contains a single integer n (1 \u2264 n \u2264 1 000), the number of planks Ujan has in store. The next line contains n integers a_1, \u2026, a_n (1 \u2264 a_i \u2264 n), the lengths of the planks.\n\nOutput\n\nFor each of the test cases, output a single integer, the maximum possible side length of the square.\n\nExample\n\nInput\n\n\n4\n5\n4 3 1 4 5\n4\n4 4 4 4\n3\n1 1 1\n5\n5 5 1 1 5\n\n\nOutput\n\n\n3\n4\n1\n3\n\nNote\n\nThe first sample corresponds to the example in the statement.\n\nIn the second sample, gluing all 4 planks will result in a 4 \u00d7 4 square.\n\nIn the third sample, the maximum possible square is 1 \u00d7 1 and can be taken simply as any of the planks.", "code": "t = int(input())\nfor i in range(t):\n\tn=int(input())\n\tl=sorted(list(map(int,input().split())))\n\twhile l[0]<n:\n\t\tl.pop(0)\n\t\tn-=1\n\tprint(len(l))", "score_style": {"score_pep8": 0.25, "score_style": 0.175, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "We have a rectangular grid of squares with H horizontal rows and W vertical columns. Let (i,j) denote the square at the i-th row from the top and the j-th column from the left. On this grid, there is a piece, which is initially placed at square (s_r,s_c).\n\nTakahashi and Aoki will play a game, where each player has a string of length N. Takahashi's string is S, and Aoki's string is T. S and T both consist of four kinds of letters: `L`, `R`, `U` and `D`.\n\nThe game consists of N steps. The i-th step proceeds as follows:\n\n* First, Takahashi performs a move. He either moves the piece in the direction of S_i, or does not move the piece.\n* Second, Aoki performs a move. He either moves the piece in the direction of T_i, or does not move the piece.\n\n\n\nHere, to move the piece in the direction of `L`, `R`, `U` and `D`, is to move the piece from square (r,c) to square (r,c-1), (r,c+1), (r-1,c) and (r+1,c), respectively. If the destination square does not exist, the piece is removed from the grid, and the game ends, even if less than N steps are done.\n\nTakahashi wants to remove the piece from the grid in one of the N steps. Aoki, on the other hand, wants to finish the N steps with the piece remaining on the grid. Determine if the piece will remain on the grid at the end of the game when both players play optimally.\n\nConstraints\n\n* 2 \\leq H,W \\leq 2 \\times 10^5\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq s_r \\leq H\n* 1 \\leq s_c \\leq W\n* |S|=|T|=N\n* S and T consists of the four kinds of letters `L`, `R`, `U` and `D`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W N\ns_r s_c\nS\nT\n\n\nOutput\n\nIf the piece will remain on the grid at the end of the game, print `YES`; otherwise, print `NO`.\n\nExamples\n\nInput\n\n2 3 3\n2 2\nRRL\nLUD\n\n\nOutput\n\nYES\n\n\nInput\n\n4 3 5\n2 2\nUDRRR\nLLDUD\n\n\nOutput\n\nNO\n\n\nInput\n\n5 6 11\n2 1\nRLDRRUDDLRL\nURRDRLLDLRD\n\n\nOutput\n\nNO", "code": "h,w,n = map(int, input().split())\nsr,sc = map(int, input().split())\ns = input()\nt = input()\nnow = [sc,sc,sr,sr]\nans = \"YES\"\nfor i,j in zip(s,t):\n  if i == \"L\":\n    now[0] -= 1\n    if now[0] <= 0:\n      ans = \"NO\"\n      break\n  elif i == \"R\":\n    now[1] += 1\n    if now[1] > w:\n      ans = \"NO\"\n      break\n  elif i == \"U\":\n    now[2] -= 1\n    if now[2] <= 0:\n      ans = \"NO\"\n      break\n  else:\n    now[3] += 1\n    if now[3] > h:\n      ans = \"NO\"\n      break\n  if j == \"L\":\n    now[1] = max(1,now[1]-1)\n  elif j == \"R\":\n    now[0] = min(w,now[0]+1)\n  elif j == \"U\":\n    now[3] = max(1,now[3]-1)\n  else:\n    now[2] = min(h,now[2]+1)\nprint(ans)\n   \n", "score_style": {"score_pep8": 0.33333333333333337, "score_style": 0.24393939393939396, "score_var": 0.15454545454545454}, "score_modularity": 0.0}
{"description": "Recently, on the course of algorithms and data structures, Valeriy learned how to use a deque. He built a deque filled with n elements. The i-th element is a_i (i = 1, 2, \u2026, n). He gradually takes the first two leftmost elements from the deque (let's call them A and B, respectively), and then does the following: if A > B, he writes A to the beginning and writes B to the end of the deque, otherwise, he writes to the beginning B, and A writes to the end of the deque. We call this sequence of actions an operation.\n\nFor example, if deque was [2, 3, 4, 5, 1], on the operation he will write B=3 to the beginning and A=2 to the end, so he will get [3, 4, 5, 1, 2].\n\nThe teacher of the course, seeing Valeriy, who was passionate about his work, approached him and gave him q queries. Each query consists of the singular number m_j (j = 1, 2, \u2026, q). It is required for each query to answer which two elements he will pull out on the m_j-th operation.\n\nNote that the queries are independent and for each query the numbers A and B should be printed in the order in which they will be pulled out of the deque.\n\nDeque is a data structure representing a list of elements where insertion of new elements or deletion of existing elements can be made from both sides.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 0 \u2264 q \u2264 3 \u22c5 10^5) \u2014 the number of elements in the deque and the number of queries. The second line contains n integers a_1, a_2, ..., a_n, where a_i (0 \u2264 a_i \u2264 10^9) \u2014 the deque element in i-th position. The next q lines contain one number each, meaning m_j (1 \u2264 m_j \u2264 10^{18}).\n\nOutput\n\nFor each teacher's query, output two numbers A and B \u2014 the numbers that Valeriy pulls out of the deque for the m_j-th operation.\n\nExamples\n\nInput\n\n\n5 3\n1 2 3 4 5\n1\n2\n10\n\n\nOutput\n\n\n1 2\n2 3\n5 2\n\n\nInput\n\n\n2 0\n0 0\n\n\nOutput\n\nNote\n\nConsider all 10 steps for the first test in detail:\n  1. [1, 2, 3, 4, 5] \u2014 on the first operation, A and B are 1 and 2, respectively.\n\nSo, 2 we write to the beginning of the deque, and 1 \u2014 to the end.\n\nWe get the following status of the deque: [2, 3, 4, 5, 1].\n\n  2. [2, 3, 4, 5, 1] \u21d2 A = 2, B = 3.\n  3. [3, 4, 5, 1, 2]\n  4. [4, 5, 1, 2, 3]\n  5. [5, 1, 2, 3, 4]\n  6. [5, 2, 3, 4, 1]\n  7. [5, 3, 4, 1, 2]\n  8. [5, 4, 1, 2, 3]\n  9. [5, 1, 2, 3, 4]\n  10. [5, 2, 3, 4, 1] \u21d2 A = 5, B = 2. ", "code": "\n\nn,q = map(int, input().split())\na = [int(x) for x in input().split()]\nmx = max(a)\nd = {}\ni = 0\nwhile a[i] != mx:\n    x,y = a[i],a[i+1]\n    a.append(min(x,y))\n    a[i+1] = max(x,y)\n    i += 1\n    d[i] = (x,y)\nla = len(a)\nfor qi in range(q):\n    mj = int(input())\n    if mj <= i:\n        print(d[mj][0], d[mj][1])\n    else:\n        dif = mj - i - 1\n        print(mx, a[i + 1 + (dif%(n-1))])\n", "score_style": {"score_pep8": 0.6842105263157895, "score_style": 0.41710526315789476, "score_var": 0.15}, "score_modularity": 0.0}
{"description": "Leo Jr. draws pictures in his notebook with checkered sheets (that is, each sheet has a regular square grid printed on it). We can assume that the sheets are infinitely large in any direction.\n\nTo draw a picture, Leo Jr. colors some of the cells on a sheet gray. He considers the resulting picture beautiful if the following conditions are satisfied:\n\n  * The picture is connected, that is, it is possible to get from any gray cell to any other by following a chain of gray cells, with each pair of adjacent cells in the path being neighbours (that is, sharing a side).\n  * Each gray cell has an even number of gray neighbours.\n  * There are exactly n gray cells with all gray neighbours. The number of other gray cells can be arbitrary (but reasonable, so that they can all be listed).\n\n\n\nLeo Jr. is now struggling to draw a beautiful picture with a particular choice of n. Help him, and provide any example of a beautiful picture.\n\nTo output cell coordinates in your answer, assume that the sheet is provided with a Cartesian coordinate system such that one of the cells is chosen to be the origin (0, 0), axes 0x and 0y are orthogonal and parallel to grid lines, and a unit step along any axis in any direction takes you to a neighbouring cell.\n\nInput\n\nThe only line contains a single integer n (1 \u2264 n \u2264 500) \u2014 the number of gray cells with all gray neighbours in a beautiful picture.\n\nOutput\n\nIn the first line, print a single integer k \u2014 the number of gray cells in your picture. For technical reasons, k should not exceed 5 \u22c5 10^5.\n\nEach of the following k lines should contain two integers \u2014 coordinates of a gray cell in your picture. All listed cells should be distinct, and the picture should satisdfy all the properties listed above. All coordinates should not exceed 10^9 by absolute value.\n\nOne can show that there exists an answer satisfying all requirements with a small enough k.\n\nExample\n\nInput\n\n\n4\n\n\nOutput\n\n\n12\n1 0\n2 0\n0 1\n1 1\n2 1\n3 1\n0 2\n1 2\n2 2\n3 2\n1 3\n2 3\n\nNote\n\nThe answer for the sample is pictured below:\n\n<image>", "code": "n = int(input())\ndelta = [[0]*(n+2) for i in range(n+2)]\nstart = 0\ncount = 0\nfor i in range(n+2):\n    if i==0 or i==n+1:\n        limit = 2\n    else:\n        limit = 3\n    for j in range(start,start+limit):\n        count+=1\n        delta[i][j]=1\n\n\n    if i==0:\n        continue\n    else:\n        start+=1\nprint(count)\nfor i in range(n+2):\n    for j in range(n+2):\n        if delta[i][j]==1:\n            print(i,j)\n", "score_style": {"score_pep8": 0.6521739130434783, "score_style": 0.4903726708074534, "score_var": 0.32857142857142857}, "score_modularity": 0.0}
{"description": "You are given an angle ang. \n\nThe Jury asks You to find such regular n-gon (regular polygon with n vertices) that it has three vertices a, b and c (they can be non-consecutive) with \\angle{abc} = ang or report that there is no such n-gon.\n\n<image>\n\nIf there are several answers, print the minimal one. It is guarantied that if answer exists then it doesn't exceed 998244353.\n\nInput\n\nThe first line contains single integer T (1 \u2264 T \u2264 180) \u2014 the number of queries. \n\nEach of the next T lines contains one integer ang (1 \u2264 ang < 180) \u2014 the angle measured in degrees. \n\nOutput\n\nFor each query print single integer n (3 \u2264 n \u2264 998244353) \u2014 minimal possible number of vertices in the regular n-gon or -1 if there is no such n.\n\nExample\n\nInput\n\n\n4\n54\n50\n2\n178\n\n\nOutput\n\n\n10\n18\n90\n180\n\nNote\n\nThe answer for the first query is on the picture above.\n\nThe answer for the second query is reached on a regular 18-gon. For example, \\angle{v_2 v_1 v_6} = 50^{\\circ}.\n\nThe example angle for the third query is \\angle{v_{11} v_{10} v_{12}} = 2^{\\circ}.\n\nIn the fourth query, minimal possible n is 180 (not 90).", "code": "min_counts = {}\n\nfor N in range(3, 361):\n    angles = []\n    alpha = 180 / N\n    for k in range(1, N - 1):\n        angle = alpha * k\n        int_angle = int(angle)\n\n        if int_angle == angle:\n            if int_angle not in min_counts:\n                min_counts[int_angle] = N\n\n    \n    \n\nT = int(input())\n\nfor _ in range(T):\n    query = int(input())\n\n    print(min_counts[query])\n", "score_style": {"score_pep8": 0.8636363636363636, "score_style": 0.6518181818181819, "score_var": 0.44000000000000006}, "score_modularity": 0.0}
{"description": "You are given an integer N. Find the number of strings of length N that satisfy the following conditions, modulo 10^9+7:\n\n* The string does not contain characters other than `A`, `C`, `G` and `T`.\n* The string does not contain `AGC` as a substring.\n* The condition above cannot be violated by swapping two adjacent characters once.\n\nConstraints\n\n* 3 \\leq N \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the number of strings of length N that satisfy the following conditions, modulo 10^9+7.\n\nExamples\n\nInput\n\n3\n\n\nOutput\n\n61\n\n\nInput\n\n4\n\n\nOutput\n\n230\n\n\nInput\n\n100\n\n\nOutput\n\n388130742", "code": "N, MOD = int(input()), 10**9 + 7\nmemo = [{} for x in range(N + 1)]\ndef ok(last4):\n  for i in range(4):\n    t = list(last4)\n    if i >= 1:\n      t[i-1], t[i] = t[i], t[i-1]\n    if ''.join(t).count('AGC') >= 1:\n      return False\n  return True\n\ndef dfs(cur, last3):\n  if last3 in memo[cur]:\n    return memo[cur][last3]\n  if cur == N:\n    return 1\n  ret = 0\n  for c in 'ACGT':\n    if ok(last3 + c):\n      ret = (ret + dfs(cur + 1, last3[1:] + c)) % MOD\n  memo[cur][last3] = ret\n  return ret\n\nprint(dfs(0, 'TTT'))\n", "score_style": {"score_pep8": 0.41666666666666663, "score_style": 0.3356060606060606, "score_var": 0.2545454545454545}, "score_modularity": 1.0}
{"description": "You are given two integers a and b.\n\nIn one move, you can choose some integer k from 1 to 10 and add it to a or subtract it from a. In other words, you choose an integer k \u2208 [1; 10] and perform a := a + k or a := a - k. You may use different values of k in different moves.\n\nYour task is to find the minimum number of moves required to obtain b from a.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 \u2264 a, b \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer: the minimum number of moves required to obtain b from a.\n\nExample\n\nInput\n\n\n6\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n\n\nOutput\n\n\n0\n3\n2\n92\n87654322\n9150\n\nNote\n\nIn the first test case of the example, you don't need to do anything.\n\nIn the second test case of the example, the following sequence of moves can be applied: 13 \u2192 23 \u2192 32 \u2192 42 (add 10, add 9, add 10).\n\nIn the third test case of the example, the following sequence of moves can be applied: 18 \u2192 10 \u2192 4 (subtract 8, subtract 6).", "code": "for _ in range (int(input())):\n    x=list(map(int,input().split()))\n    a=x[0]\n    b=x[1]\n    if a==b:\n        print(\"0\")\n    else:\n        t=abs(a-b)\n        if t%10!=0:\n            print(t//10+1)\n        else:\n            print(t//10)", "score_style": {"score_pep8": 0.41666666666666663, "score_style": 0.2583333333333333, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Sometimes some words like \"localization\" or \"internationalization\" are so long that writing them many times in one text is quite tiresome.\n\nLet's consider a word too long, if its length is strictly more than 10 characters. All too long words should be replaced with a special abbreviation.\n\nThis abbreviation is made like this: we write down the first and the last letter of a word and between them we write the number of letters between the first and the last letters. That number is in decimal system and doesn't contain any leading zeroes.\n\nThus, \"localization\" will be spelt as \"l10n\", and \"internationalization\u00bb will be spelt as \"i18n\".\n\nYou are suggested to automatize the process of changing the words with abbreviations. At that all too long words should be replaced by the abbreviation and the words that are not too long should not undergo any changes.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100). Each of the following n lines contains one word. All the words consist of lowercase Latin letters and possess the lengths of from 1 to 100 characters.\n\nOutput\n\nPrint n lines. The i-th line should contain the result of replacing of the i-th word from the input data.\n\nExamples\n\nInput\n\n4\nword\nlocalization\ninternationalization\npneumonoultramicroscopicsilicovolcanoconiosis\n\n\nOutput\n\nword\nl10n\ni18n\np43s", "code": "from sys import stdin\nn = int(stdin.readline())\n \nwhile n > 0:\n    cur = stdin.readline().rstrip()\n    if len(cur) <= 10:\n        print(cur)\n    else:\n        print(cur[0] + str(len(cur) - 2) + cur[-1])\n    n -= 1", "score_style": {"score_pep8": 0.9, "score_style": 0.55, "score_var": 0.2}, "score_modularity": 0.0}
{"description": "You are given an array a consisting of n integers. Each a_i is one of the six following numbers: 4, 8, 15, 16, 23, 42.\n\nYour task is to remove the minimum number of elements to make this array good.\n\nAn array of length k is called good if k is divisible by 6 and it is possible to split it into k/6 subsequences 4, 8, 15, 16, 23, 42.\n\nExamples of good arrays:\n\n  * [4, 8, 15, 16, 23, 42] (the whole array is a required sequence); \n  * [4, 8, 4, 15, 16, 8, 23, 15, 16, 42, 23, 42] (the first sequence is formed from first, second, fourth, fifth, seventh and tenth elements and the second one is formed from remaining elements); \n  * [] (the empty array is good). \n\n\n\nExamples of bad arrays: \n\n  * [4, 8, 15, 16, 42, 23] (the order of elements should be exactly 4, 8, 15, 16, 23, 42); \n  * [4, 8, 15, 16, 23, 42, 4] (the length of the array is not divisible by 6); \n  * [4, 8, 15, 16, 23, 42, 4, 8, 15, 16, 23, 23] (the first sequence can be formed from first six elements but the remaining array cannot form the required sequence). \n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 5 \u22c5 10^5) \u2014 the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (each a_i is one of the following numbers: 4, 8, 15, 16, 23, 42), where a_i is the i-th element of a.\n\nOutput\n\nPrint one integer \u2014 the minimum number of elements you have to remove to obtain a good array.\n\nExamples\n\nInput\n\n\n5\n4 8 15 16 23\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n12\n4 8 4 15 16 8 23 15 16 42 23 42\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n15\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\n\n\nOutput\n\n\n3", "code": "a=[4,8,15,16,23,42]\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(len(l)):\n    l[i]=a.index(l[i])\ncount=[0]*6 \nfor i in range(len(l)):\n    if l[i]==0:\n        count[0]+=1 \n    else:\n        if count[l[i]-1]>0:\n            count[l[i]-1]-=1 \n            count[l[i]]+=1 \nprint(n-6*count[5])            \n", "score_style": {"score_pep8": 0.2857142857142857, "score_style": 0.23285714285714285, "score_var": 0.18}, "score_modularity": 0.0}
{"description": "ZS the Coder and Chris the Baboon are travelling to Udayland! To get there, they have to get on the special IOI bus. The IOI bus has n rows of seats. There are 4 seats in each row, and the seats are separated into pairs by a walkway. When ZS and Chris came, some places in the bus was already occupied.\n\nZS and Chris are good friends. They insist to get a pair of neighbouring empty seats. Two seats are considered neighbouring if they are in the same row and in the same pair. Given the configuration of the bus, can you help ZS and Chris determine where they should sit?\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of rows of seats in the bus.\n\nThen, n lines follow. Each line contains exactly 5 characters, the first two of them denote the first pair of seats in the row, the third character denotes the walkway (it always equals '|') and the last two of them denote the second pair of seats in the row. \n\nEach character, except the walkway, equals to 'O' or to 'X'. 'O' denotes an empty seat, 'X' denotes an occupied seat. See the sample cases for more details. \n\nOutput\n\nIf it is possible for Chris and ZS to sit at neighbouring empty seats, print \"YES\" (without quotes) in the first line. In the next n lines print the bus configuration, where the characters in the pair of seats for Chris and ZS is changed with characters '+'. Thus the configuration should differ from the input one by exactly two charaters (they should be equal to 'O' in the input and to '+' in the output).\n\nIf there is no pair of seats for Chris and ZS, print \"NO\" (without quotes) in a single line.\n\nIf there are multiple solutions, you may print any of them.\n\nExamples\n\nInput\n\n6\nOO|OX\nXO|XX\nOX|OO\nXX|OX\nOO|OO\nOO|XX\n\n\nOutput\n\nYES\n++|OX\nXO|XX\nOX|OO\nXX|OX\nOO|OO\nOO|XX\n\n\nInput\n\n4\nXO|OX\nXO|XX\nOX|OX\nXX|OX\n\n\nOutput\n\nNO\n\n\nInput\n\n5\nXX|XX\nXX|XX\nXO|OX\nXO|OO\nOX|XO\n\n\nOutput\n\nYES\nXX|XX\nXX|XX\nXO|OX\nXO|++\nOX|XO\n\nNote\n\nNote that the following is an incorrect configuration for the first sample case because the seats must be in the same pair.\n\nO+|+X\n\nXO|XX\n\nOX|OO\n\nXX|OX\n\nOO|OO\n\nOO|XX", "code": "\nimport random\nimport sys\nimport os\n\nrest = 0\nfinal = []\nallrows = []\nrownum = int(sys.stdin.readline())\nu =  rownum\nfor x in range(0,rownum):\n    rownum = sys.stdin.readline()\n    row = rownum.split(\"|\")\n    allrows.append(row)\nfor x in range(0,u):\n    for i in range(0,2):\n        \n        if (allrows[x][i] == 'OO' or allrows[x][i] == 'OO\\n') and rest == 0:\n            if allrows[x][i] == 'OO\\n':\n                allrows[x][i] = \"++\\n\"\n            else:\n                allrows[x][i] = \"++\"\n            rest+=1\n    final.append(allrows[x][0]+\"|\"+allrows[x][1])\n\nif rest == 1:\n    print('YES')\n    for x in range(0,u):\n        print(final[x], end=\"\")\nelse:\n    print('NO')", "score_style": {"score_pep8": 0.7, "score_style": 0.5249999999999999, "score_var": 0.35}, "score_modularity": 0.0}
{"description": "Petya started to attend programming lessons. On the first lesson his task was to write a simple program. The program was supposed to do the following: in the given string, consisting if uppercase and lowercase Latin letters, it: \n\n  * deletes all the vowels, \n  * inserts a character \".\" before each consonant, \n  * replaces all uppercase consonants with corresponding lowercase ones. \n\n\n\nVowels are letters \"A\", \"O\", \"Y\", \"E\", \"U\", \"I\", and the rest are consonants. The program's input is exactly one string, it should return the output as a single string, resulting after the program's processing the initial string.\n\nHelp Petya cope with this easy task.\n\nInput\n\nThe first line represents input string of Petya's program. This string only consists of uppercase and lowercase Latin letters and its length is from 1 to 100, inclusive.\n\nOutput\n\nPrint the resulting string. It is guaranteed that this string is not empty.\n\nExamples\n\nInput\n\ntour\n\n\nOutput\n\n.t.r\n\n\nInput\n\nCodeforces\n\n\nOutput\n\n.c.d.f.r.c.s\n\n\nInput\n\naBAcAba\n\n\nOutput\n\n.b.c.b", "code": "s=str(input())\ngls=[\"A\", \"O\", \"Y\", \"E\", \"U\", \"I\", \"a\", \"o\", \"y\", \"e\", \"u\", \"i\"]\nglss='AOYEUIaoyeui'\nj=0\nss=''\nfor i in range(len(s)):\n    if s[i] not in gls:\n        ss = ss + '.' + s[i].lower()\nprint(ss)", "score_style": {"score_pep8": 0.4444444444444444, "score_style": 0.3222222222222222, "score_var": 0.2}, "score_modularity": 0.0}
{"description": "You are given a chessboard consisting of n rows and n columns. Rows are numbered from bottom to top from 1 to n. Columns are numbered from left to right from 1 to n. The cell at the intersection of the x-th column and the y-th row is denoted as (x, y). Furthermore, the k-th column is a special column. \n\nInitially, the board is empty. There are m changes to the board. During the i-th change one pawn is added or removed from the board. The current board is good if we can move all pawns to the special column by the followings rules:\n\n  * Pawn in the cell (x, y) can be moved to the cell (x, y + 1), (x - 1, y + 1) or (x + 1, y + 1); \n  * You can make as many such moves as you like; \n  * Pawns can not be moved outside the chessboard; \n  * Each cell can not contain more than one pawn. \n\n\n\nThe current board may not always be good. To fix it, you can add new rows to the board. New rows are added at the top, i. e. they will have numbers n+1, n+2, n+3, ....\n\nAfter each of m changes, print one integer \u2014 the minimum number of rows which you have to add to make the board good.\n\nInput\n\nThe first line contains three integers n, k and m (1 \u2264 n, m \u2264 2 \u22c5 10^5; 1 \u2264 k \u2264 n) \u2014 the size of the board, the index of the special column and the number of changes respectively.\n\nThen m lines follow. The i-th line contains two integers x and y (1 \u2264 x, y \u2264 n) \u2014 the index of the column and the index of the row respectively. If there is no pawn in the cell (x, y), then you add a pawn to this cell, otherwise \u2014 you remove the pawn from this cell.\n\nOutput\n\nAfter each change print one integer \u2014 the minimum number of rows which you have to add to make the board good.\n\nExample\n\nInput\n\n\n5 3 5\n4 4\n3 5\n2 4\n3 4\n3 5\n\n\nOutput\n\n\n0\n1\n2\n2\n1", "code": "import math\nn, k, m = [int(i) for i in input().split()]\nl = math.ceil((math.log(2*n) / math.log(2)))\np = 2 ** l;memo = [0] * (2 * p);allres = [0] * (2 * p);exist = set()\nfor _i in range(m):\n    x, y = [int(i) for i in input().split()];l = abs(x - k) + y;index = l + p\n    if (x, y) in exist:\n        exist.remove((x, y))\n        while index != 0:memo[index] -= 1;index = index // 2\n    else:\n        exist.add((x, y))\n        while index != 0:memo[index] += 1;index = index // 2\n    index = (l + p) // 2;allres[l+p] = l + memo[l + p] - 1\n    if memo[l + p] == 0:allres[l+p] = 0\n    while index != 0:allres[index] = max(allres[index * 2] + memo[index * 2 + 1], allres[index * 2 + 1]);index = index // 2   \n    print (max(allres[1] - n, 0))", "score_style": {"score_pep8": 0.4375, "score_style": 0.33413461538461536, "score_var": 0.23076923076923075}, "score_modularity": 0.0}
{"description": "Sometimes some words like \"localization\" or \"internationalization\" are so long that writing them many times in one text is quite tiresome.\n\nLet's consider a word too long, if its length is strictly more than 10 characters. All too long words should be replaced with a special abbreviation.\n\nThis abbreviation is made like this: we write down the first and the last letter of a word and between them we write the number of letters between the first and the last letters. That number is in decimal system and doesn't contain any leading zeroes.\n\nThus, \"localization\" will be spelt as \"l10n\", and \"internationalization\u00bb will be spelt as \"i18n\".\n\nYou are suggested to automatize the process of changing the words with abbreviations. At that all too long words should be replaced by the abbreviation and the words that are not too long should not undergo any changes.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100). Each of the following n lines contains one word. All the words consist of lowercase Latin letters and possess the lengths of from 1 to 100 characters.\n\nOutput\n\nPrint n lines. The i-th line should contain the result of replacing of the i-th word from the input data.\n\nExamples\n\nInput\n\n4\nword\nlocalization\ninternationalization\npneumonoultramicroscopicsilicovolcanoconiosis\n\n\nOutput\n\nword\nl10n\ni18n\np43s", "code": "n = int(input())\n\nfor i in range(n):\n    w = input().strip()\n    if len(w) <= 10:\n        print (w)\n    else:\n        print (w[0] + str(len(w) - 2) + w[-1])", "score_style": {"score_pep8": 0.75, "score_style": 0.425, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Being a nonconformist, Volodya is displeased with the current state of things, particularly with the order of natural numbers (natural number is positive integer number). He is determined to rearrange them. But there are too many natural numbers, so Volodya decided to start with the first n. He writes down the following sequence of numbers: firstly all odd integers from 1 to n (in ascending order), then all even integers from 1 to n (also in ascending order). Help our hero to find out which number will stand at the position number k.\n\nInput\n\nThe only line of input contains integers n and k (1 \u2264 k \u2264 n \u2264 1012).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nOutput\n\nPrint the number that will stand at the position number k after Volodya's manipulations.\n\nExamples\n\nInput\n\n10 3\n\n\nOutput\n\n5\n\nInput\n\n7 7\n\n\nOutput\n\n6\n\nNote\n\nIn the first sample Volodya's sequence will look like this: {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}. The third place in the sequence is therefore occupied by the number 5.", "code": "n,k=map(int,input().split())\nif n%2==0:\n    x=k-(n//2)\n    if k<=n//2:\n        num=1+(k-1)*2\n    else:\n        num=2+(x-1)*2\nelse:\n    x=k-((n//2)+1)\n    if k<=(n//2)+1:\n        num=1+(k-1)*2\n    else:\n        num=2+(x-1)*2\nprint(num)\n", "score_style": {"score_pep8": 0.2857142857142857, "score_style": 0.21785714285714286, "score_var": 0.15}, "score_modularity": 0.0}
{"description": "You are given a integer n (n > 0). Find any integer s which satisfies these conditions, or report that there are no such numbers:\n\nIn the decimal representation of s: \n\n  * s > 0, \n  * s consists of n digits, \n  * no digit in s equals 0, \n  * s is not divisible by any of it's digits. \n\nInput\n\nThe input consists of multiple test cases. The first line of the input contains a single integer t (1 \u2264 t \u2264 400), the number of test cases. The next t lines each describe a test case.\n\nEach test case contains one positive integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n for all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, print an integer s which satisfies the conditions described above, or \"-1\" (without quotes), if no such number exists. If there are multiple possible solutions for s, print any solution.\n\nExample\n\nInput\n\n\n4\n1\n2\n3\n4\n\n\nOutput\n\n\n-1\n57\n239\n6789\n\nNote\n\nIn the first test case, there are no possible solutions for s consisting of one digit, because any such solution is divisible by itself.\n\nFor the second test case, the possible solutions are: 23, 27, 29, 34, 37, 38, 43, 46, 47, 49, 53, 54, 56, 57, 58, 59, 67, 68, 69, 73, 74, 76, 78, 79, 83, 86, 87, 89, 94, 97, and 98.\n\nFor the third test case, one possible solution is 239 because 239 is not divisible by 2, 3 or 9 and has three digits (none of which equals zero).", "code": "\n\n\n\nt=input()\nt=int(t)\nfor i in range(t):\n    n=int(input())\n    if n==1:\n        print(-1)\n    else:\n        s=\"2\"+\"3\"*(n-1)\n        print(s)\n\n        \n        \n", "score_style": {"score_pep8": 0.4444444444444444, "score_style": 0.2722222222222222, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Little Vasya loves orange juice very much. That's why any food and drink in his kitchen necessarily contains orange juice. There are n drinks in his fridge, the volume fraction of orange juice in the i-th drink equals pi percent.\n\nOne day Vasya decided to make himself an orange cocktail. He took equal proportions of each of the n drinks and mixed them. Then he wondered, how much orange juice the cocktail has.\n\nFind the volume fraction of orange juice in the final drink.\n\nInput\n\nThe first input line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of orange-containing drinks in Vasya's fridge. The second line contains n integers pi (0 \u2264 pi \u2264 100) \u2014 the volume fraction of orange juice in the i-th drink, in percent. The numbers are separated by a space.\n\nOutput\n\nPrint the volume fraction in percent of orange juice in Vasya's cocktail. The answer will be considered correct if the absolute or relative error does not exceed 10  - 4.\n\nExamples\n\nInput\n\n3\n50 50 100\n\n\nOutput\n\n66.666666666667\n\n\nInput\n\n4\n0 25 50 75\n\n\nOutput\n\n37.500000000000\n\nNote\n\nNote to the first sample: let's assume that Vasya takes x milliliters of each drink from the fridge. Then the volume of pure juice in the cocktail will equal <image> milliliters. The total cocktail's volume equals 3\u00b7x milliliters, so the volume fraction of the juice in the cocktail equals <image>, that is, 66.(6) percent.", "code": "n=int(input())\nx=list(map(int,input().split()))\nc=sum(x)\nprint(c/n)", "score_style": {"score_pep8": 0.25, "score_style": 0.175, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "A competitive eater, Alice is scheduling some practices for an eating contest on a magical calendar. The calendar is unusual because a week contains not necessarily 7 days!\n\nIn detail, she can choose any integer k which satisfies 1 \u2264 k \u2264 r, and set k days as the number of days in a week.\n\nAlice is going to paint some n consecutive days on this calendar. On this calendar, dates are written from the left cell to the right cell in a week. If a date reaches the last day of a week, the next day's cell is the leftmost cell in the next (under) row.\n\nShe wants to make all of the painted cells to be connected by side. It means, that for any two painted cells there should exist at least one sequence of painted cells, started in one of these cells, and ended in another, such that any two consecutive cells in this sequence are connected by side.\n\nAlice is considering the shape of the painted cells. Two shapes are the same if there exists a way to make them exactly overlapped using only parallel moves, parallel to the calendar's sides.\n\nFor example, in the picture, a week has 4 days and Alice paints 5 consecutive days. [1] and [2] are different shapes, but [1] and [3] are equal shapes.\n\n<image>\n\nAlice wants to know how many possible shapes exists if she set how many days a week has and choose consecutive n days and paints them in calendar started in one of the days of the week. As was said before, she considers only shapes, there all cells are connected by side.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case, the only line contains two integers n, r (1 \u2264 n \u2264 10^9, 1 \u2264 r \u2264 10^9).\n\nOutput\n\nFor each test case, print a single integer \u2014 the answer to the problem.\n\nPlease note, that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language.\n\nExample\n\nInput\n\n\n5\n3 4\n3 2\n3 1\n13 7\n1010000 9999999\n\n\nOutput\n\n\n4\n3\n1\n28\n510049495001\n\nNote\n\nIn the first test case, Alice can set 1,2,3 or 4 days as the number of days in a week.\n\nThere are 6 possible paintings shown in the picture, but there are only 4 different shapes. So, the answer is 4. Notice that the last example in the picture is an invalid painting because all cells are not connected by sides.\n\n<image>\n\nIn the last test case, be careful with the overflow issue, described in the output format.", "code": "for _ in range(int(input())):\n  n,r=map(int,input().split())\n  if(n<=r):\n    x=((n*(n-1))//2)+1\n    print(x)\n  else:\n    y=(r*(r+1))//2\n    print(y)", "score_style": {"score_pep8": 0.375, "score_style": 0.2375, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Sometimes some words like \"localization\" or \"internationalization\" are so long that writing them many times in one text is quite tiresome.\n\nLet's consider a word too long, if its length is strictly more than 10 characters. All too long words should be replaced with a special abbreviation.\n\nThis abbreviation is made like this: we write down the first and the last letter of a word and between them we write the number of letters between the first and the last letters. That number is in decimal system and doesn't contain any leading zeroes.\n\nThus, \"localization\" will be spelt as \"l10n\", and \"internationalization\u00bb will be spelt as \"i18n\".\n\nYou are suggested to automatize the process of changing the words with abbreviations. At that all too long words should be replaced by the abbreviation and the words that are not too long should not undergo any changes.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100). Each of the following n lines contains one word. All the words consist of lowercase Latin letters and possess the lengths of from 1 to 100 characters.\n\nOutput\n\nPrint n lines. The i-th line should contain the result of replacing of the i-th word from the input data.\n\nExamples\n\nInput\n\n4\nword\nlocalization\ninternationalization\npneumonoultramicroscopicsilicovolcanoconiosis\n\n\nOutput\n\nword\nl10n\ni18n\np43s", "code": "list = []\nlist1 = []\nc = 1\nn = int(input())\nfor i in range(n):\n    x = input()\n    list.append(x)\nfor g in list:\n    if(len(g)>10):\n        for j in range(1,len(g)-2):\n            c+=1\n        g = g[0]+str(c)+g[-1]\n    list1.append(g)\n    c = 1\nlist = list1\nfor x in list:\n    print(x)\n", "score_style": {"score_pep8": 0.8235294117647058, "score_style": 0.4903361344537815, "score_var": 0.15714285714285714}, "score_modularity": 0.0}
{"description": "Shapur was an extremely gifted student. He was great at everything including Combinatorics, Algebra, Number Theory, Geometry, Calculus, etc. He was not only smart but extraordinarily fast! He could manage to sum 1018 numbers in a single second.\n\nOne day in 230 AD Shapur was trying to find out if any one can possibly do calculations faster than him. As a result he made a very great contest and asked every one to come and take part.\n\nIn his contest he gave the contestants many different pairs of numbers. Each number is made from digits 0 or 1. The contestants should write a new number corresponding to the given pair of numbers. The rule is simple: The i-th digit of the answer is 1 if and only if the i-th digit of the two given numbers differ. In the other case the i-th digit of the answer is 0.\n\nShapur made many numbers and first tried his own speed. He saw that he can perform these operations on numbers of length \u221e (length of a number is number of digits in it) in a glance! He always gives correct answers so he expects the contestants to give correct answers, too. He is a good fellow so he won't give anyone very big numbers and he always gives one person numbers of same length.\n\nNow you are going to take part in Shapur's contest. See if you are faster and more accurate.\n\nInput\n\nThere are two lines in each input. Each of them contains a single number. It is guaranteed that the numbers are made from 0 and 1 only and that their length is same. The numbers may start with 0. The length of each number doesn't exceed 100.\n\nOutput\n\nWrite one line \u2014 the corresponding answer. Do not omit the leading 0s.\n\nExamples\n\nInput\n\n1010100\n0100101\n\n\nOutput\n\n1110001\n\n\nInput\n\n000\n111\n\n\nOutput\n\n111\n\n\nInput\n\n1110\n1010\n\n\nOutput\n\n0100\n\n\nInput\n\n01110\n01100\n\n\nOutput\n\n00010", "code": "x=input()\ny=input()\nt=\"\"\nfor i in range(len(x)):\n    if x[i]==y[i]:\n        t=t+'0'\n    else:\n        t=t+'1'\nprint(t)", "score_style": {"score_pep8": 0.33333333333333337, "score_style": 0.21666666666666667, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "You are given three integers x, y and n. Your task is to find the maximum integer k such that 0 \u2264 k \u2264 n that k mod x = y, where mod is modulo operation. Many programming languages use percent operator % to implement it.\n\nIn other words, with given x, y and n you need to find the maximum possible integer from 0 to n that has the remainder y modulo x.\n\nYou have to answer t independent test cases. It is guaranteed that such k exists for each test case.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 5 \u22c5 10^4) \u2014 the number of test cases. The next t lines contain test cases.\n\nThe only line of the test case contains three integers x, y and n (2 \u2264 x \u2264 10^9;~ 0 \u2264 y < x;~ y \u2264 n \u2264 10^9).\n\nIt can be shown that such k always exists under the given constraints.\n\nOutput\n\nFor each test case, print the answer \u2014 maximum non-negative integer k such that 0 \u2264 k \u2264 n and k mod x = y. It is guaranteed that the answer always exists.\n\nExample\n\nInput\n\n\n7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n\n\nOutput\n\n\n12339\n0\n15\n54306\n999999995\n185\n999999998\n\nNote\n\nIn the first test case of the example, the answer is 12339 = 7 \u22c5 1762 + 5 (thus, 12339 mod 7 = 5). It is obvious that there is no greater integer not exceeding 12345 which has the remainder 5 modulo 7.", "code": "n = int(input())\n\nfor _ in range(n):\n    inp = input().split(\" \")\n    x = int(inp[0])\n    y = int(inp[1])\n    n = int(inp[2])\n\n    a = n//x\n\n    while a*x + y > n:\n        a -=1\n\n    print(a*x + y)", "score_style": {"score_pep8": 0.9285714285714286, "score_style": 0.530952380952381, "score_var": 0.13333333333333333}, "score_modularity": 0.0}
{"description": "You are given integers A and B, each between 1 and 3 (inclusive).\n\nDetermine if there is an integer C between 1 and 3 (inclusive) such that A \\times B \\times C is an odd number.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B \\leq 3\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B\n\n\nOutput\n\nIf there is an integer C between 1 and 3 that satisfies the condition, print `Yes`; otherwise, print `No`.\n\nExamples\n\nInput\n\n3 1\n\n\nOutput\n\nYes\n\n\nInput\n\n1 2\n\n\nOutput\n\nNo\n\n\nInput\n\n2 2\n\n\nOutput\n\nNo", "code": "a,b=map(int,input().split())\nprint('Yes' if (a%2)!=0 and (b%2)!=0 else 'No')", "score_style": {"score_pep8": 0.0, "score_style": 0.05, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Polycarpus loves hamburgers very much. He especially adores the hamburgers he makes with his own hands. Polycarpus thinks that there are only three decent ingredients to make hamburgers from: a bread, sausage and cheese. He writes down the recipe of his favorite \"Le Hamburger de Polycarpus\" as a string of letters 'B' (bread), 'S' (sausage) \u0438 'C' (cheese). The ingredients in the recipe go from bottom to top, for example, recipe \"\u0412SCBS\" represents the hamburger where the ingredients go from bottom to top as bread, sausage, cheese, bread and sausage again.\n\nPolycarpus has nb pieces of bread, ns pieces of sausage and nc pieces of cheese in the kitchen. Besides, the shop nearby has all three ingredients, the prices are pb rubles for a piece of bread, ps for a piece of sausage and pc for a piece of cheese.\n\nPolycarpus has r rubles and he is ready to shop on them. What maximum number of hamburgers can he cook? You can assume that Polycarpus cannot break or slice any of the pieces of bread, sausage or cheese. Besides, the shop has an unlimited number of pieces of each ingredient.\n\nInput\n\nThe first line of the input contains a non-empty string that describes the recipe of \"Le Hamburger de Polycarpus\". The length of the string doesn't exceed 100, the string contains only letters 'B' (uppercase English B), 'S' (uppercase English S) and 'C' (uppercase English C).\n\nThe second line contains three integers nb, ns, nc (1 \u2264 nb, ns, nc \u2264 100) \u2014 the number of the pieces of bread, sausage and cheese on Polycarpus' kitchen. The third line contains three integers pb, ps, pc (1 \u2264 pb, ps, pc \u2264 100) \u2014 the price of one piece of bread, sausage and cheese in the shop. Finally, the fourth line contains integer r (1 \u2264 r \u2264 1012) \u2014 the number of rubles Polycarpus has.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nOutput\n\nPrint the maximum number of hamburgers Polycarpus can make. If he can't make any hamburger, print 0.\n\nExamples\n\nInput\n\nBBBSSC\n6 4 1\n1 2 3\n4\n\n\nOutput\n\n2\n\n\nInput\n\nBBC\n1 10 1\n1 10 1\n21\n\n\nOutput\n\n7\n\n\nInput\n\nBSC\n1 1 1\n1 1 3\n1000000000000\n\n\nOutput\n\n200000000001", "code": "\n\n\nimport sys\nfrom functools import lru_cache, cmp_to_key\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf\nfrom collections import defaultdict as dd, deque, Counter as C\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom time import perf_counter\nfrom fractions import Fraction\nfrom decimal import Decimal\n\n\n\nmod = pow(10, 9) + 7\nmod2 = 998244353\ndef data(): return sys.stdin.readline().strip()\ndef out(var): sys.stdout.write(str(var))\ndef outa(*var, end=\"\\n\"): sys.stdout.write(' '.join(map(str, var)) + end)\ndef l(): return list(sp())\ndef sl(): return list(ssp())\ndef sp(): return map(int, data().split())\ndef ssp(): return map(str, data().split())\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\n\n\nc = C(data())\nnb, ns, nc = sp()\npb, ps, pc = sp()\nr = int(data())\nanswer = 0\nlow, high = 0, int(1e18)\nwhile low <= high:\n    mid = (low + high) >> 1\n    bc, sc, cc = pb * max(0, (c['B'] * mid - nb)), ps * max(0, (c['S'] * mid - ns)), pc * max(0, (c['C'] * mid - nc))\n    if bc + sc + cc <= r:\n        answer = max(answer, mid)\n        low = mid + 1\n    else:\n        high = mid - 1\nout(answer)\n", "score_style": {"score_pep8": 0.7073170731707317, "score_style": 0.46887592788971366, "score_var": 0.23043478260869565}, "score_modularity": 1.0}
{"description": "You are given a string s of even length n. String s is binary, in other words, consists only of 0's and 1's.\n\nString s has exactly n/2 zeroes and n/2 ones (n is even).\n\nIn one operation you can reverse any substring of s. A substring of a string is a contiguous subsequence of that string.\n\nWhat is the minimum number of operations you need to make string s alternating? A string is alternating if s_i \u2260 s_{i + 1} for all i. There are two types of alternating strings in general: 01010101... or 10101010...\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (2 \u2264 n \u2264 10^5; n is even) \u2014 the length of string s.\n\nThe second line of each test case contains a binary string s of length n (s_i \u2208 {0, 1}). String s has exactly n/2 zeroes and n/2 ones.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, print the minimum number of operations to make s alternating.\n\nExample\n\nInput\n\n\n3\n2\n10\n4\n0110\n8\n11101000\n\n\nOutput\n\n\n0\n1\n2\n\nNote\n\nIn the first test case, string 10 is already alternating.\n\nIn the second test case, we can, for example, reverse the last two elements of s and get: 0110 \u2192 0101.\n\nIn the third test case, we can, for example, make the following two operations: \n\n  1. 11101000 \u2192 10101100; \n  2. 10101100 \u2192 10101010. ", "code": "for _ in range(int(input())):\n    n = int(input())\n    st = input()\n    count = 0\n    for i in range(n-1):\n        if st[i]==st[i+1]:\n            count += 1\n    count+=1\n    print(count//2)", "score_style": {"score_pep8": 0.7777777777777778, "score_style": 0.48888888888888893, "score_var": 0.2}, "score_modularity": 0.0}
{"description": "Emuskald needs a fence around his farm, but he is too lazy to build it himself. So he purchased a fence-building robot.\n\nHe wants the fence to be a regular polygon. The robot builds the fence along a single path, but it can only make fence corners at a single angle a.\n\nWill the robot be able to build the fence Emuskald wants? In other words, is there a regular polygon which angles are equal to a?\n\nInput\n\nThe first line of input contains an integer t (0 < t < 180) \u2014 the number of tests. Each of the following t lines contains a single integer a (0 < a < 180) \u2014 the angle the robot can make corners at measured in degrees.\n\nOutput\n\nFor each test, output on a single line \"YES\" (without quotes), if the robot can build a fence Emuskald wants, and \"NO\" (without quotes), if it is impossible.\n\nExamples\n\nInput\n\n3\n30\n60\n90\n\n\nOutput\n\nNO\nYES\nYES\n\nNote\n\nIn the first test case, it is impossible to build the fence, since there is no regular polygon with angle <image>.\n\nIn the second test case, the fence is a regular triangle, and in the last test case \u2014 a square.", "code": "n=int(input())\nfor i in range(n):\n        a=int(input())\n        if 360%(180-a):print(\"NO\")\n        else:print(\"YES\")\n", "score_style": {"score_pep8": 0.19999999999999996, "score_style": 0.14999999999999997, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Farmer John has a farm that consists of n pastures connected by one-directional roads. Each road has a weight, representing the time it takes to go from the start to the end of the road. The roads could have negative weight, where the cows go so fast that they go back in time! However, Farmer John guarantees that it is impossible for the cows to get stuck in a time loop, where they can infinitely go back in time by traveling across a sequence of roads. Also, each pair of pastures is connected by at most one road in each direction.\n\nUnfortunately, Farmer John lost the map of the farm. All he remembers is an array d, where d_i is the smallest amount of time it took the cows to reach the i-th pasture from pasture 1 using a sequence of roads. The cost of his farm is the sum of the weights of each of the roads, and Farmer John needs to know the minimal cost of a farm that is consistent with his memory.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of pastures.\n\nThe second line of each test case contains n space separated integers d_1, d_2, \u2026, d_n (0 \u2264 d_i \u2264 10^9) \u2014 the array d. It is guaranteed that d_1 = 0.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, output the minimum possible cost of a farm that is consistent with Farmer John's memory.\n\nExample\n\nInput\n\n\n3\n3\n0 2 3\n2\n0 1000000000\n1\n0\n\n\nOutput\n\n\n-3\n0\n0\n\nNote\n\nIn the first test case, you can add roads \n\n  * from pasture 1 to pasture 2 with a time of 2, \n  * from pasture 2 to pasture 3 with a time of 1, \n  * from pasture 3 to pasture 1 with a time of -3, \n  * from pasture 3 to pasture 2 with a time of -1, \n  * from pasture 2 to pasture 1 with a time of -2. \n\nThe total cost is 2 + 1 + -3 + -1 + -2 = -3.\n\nIn the second test case, you can add a road from pasture 1 to pasture 2 with cost 1000000000 and a road from pasture 2 to pasture 1 with cost -1000000000. The total cost is 1000000000 + -1000000000 = 0.\n\nIn the third test case, you can't add any roads. The total cost is 0.", "code": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    ans = d[-1]\n    for i in range(n - 1):\n        dd = d[i + 1] - d[i]\n        l, r = i + 1, n - i - 1\n        ans -= dd * l * r\n    print(ans)", "score_style": {"score_pep8": 1.0, "score_style": 0.5666666666666667, "score_var": 0.13333333333333333}, "score_modularity": 0.0}
{"description": "Vasiliy likes to rest after a hard work, so you may often meet him in some bar nearby. As all programmers do, he loves the famous drink \"Beecola\", which can be bought in n different shops in the city. It's known that the price of one bottle in the shop i is equal to xi coins.\n\nVasiliy plans to buy his favorite drink for q consecutive days. He knows, that on the i-th day he will be able to spent mi coins. Now, for each of the days he want to know in how many different shops he can buy a bottle of \"Beecola\".\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000) \u2014 the number of shops in the city that sell Vasiliy's favourite drink.\n\nThe second line contains n integers xi (1 \u2264 xi \u2264 100 000) \u2014 prices of the bottles of the drink in the i-th shop.\n\nThe third line contains a single integer q (1 \u2264 q \u2264 100 000) \u2014 the number of days Vasiliy plans to buy the drink.\n\nThen follow q lines each containing one integer mi (1 \u2264 mi \u2264 109) \u2014 the number of coins Vasiliy can spent on the i-th day.\n\nOutput\n\nPrint q integers. The i-th of them should be equal to the number of shops where Vasiliy will be able to buy a bottle of the drink on the i-th day.\n\nExample\n\nInput\n\n5\n3 10 8 6 11\n4\n1\n10\n3\n11\n\n\nOutput\n\n0\n4\n1\n5\n\nNote\n\nOn the first day, Vasiliy won't be able to buy a drink in any of the shops.\n\nOn the second day, Vasiliy can buy a drink in the shops 1, 2, 3 and 4.\n\nOn the third day, Vasiliy can buy a drink only in the shop number 1.\n\nFinally, on the last day Vasiliy can buy a drink in any shop.", "code": "\n\n\nimport bisect\nnos=int(input())\nshops=list(map(int,input().split()))\nnod=int(input())\nshops.sort()\nfor i in range(nod):\n    print(bisect.bisect_right(shops,int(input())))\n    \n    ", "score_style": {"score_pep8": 0.4285714285714286, "score_style": 0.3642857142857143, "score_var": 0.3}, "score_modularity": 0.0}
{"description": "Bear Limak wants to become the largest of bears, or at least to become larger than his brother Bob.\n\nRight now, Limak and Bob weigh a and b respectively. It's guaranteed that Limak's weight is smaller than or equal to his brother's weight.\n\nLimak eats a lot and his weight is tripled after every year, while Bob's weight is doubled after every year.\n\nAfter how many full years will Limak become strictly larger (strictly heavier) than Bob?\n\nInput\n\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10) \u2014 the weight of Limak and the weight of Bob respectively.\n\nOutput\n\nPrint one integer, denoting the integer number of years after which Limak will become strictly larger than Bob.\n\nExamples\n\nInput\n\n4 7\n\n\nOutput\n\n2\n\n\nInput\n\n4 9\n\n\nOutput\n\n3\n\n\nInput\n\n1 1\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample, Limak weighs 4 and Bob weighs 7 initially. After one year their weights are 4\u00b73 = 12 and 7\u00b72 = 14 respectively (one weight is tripled while the other one is doubled). Limak isn't larger than Bob yet. After the second year weights are 36 and 28, so the first weight is greater than the second one. Limak became larger than Bob after two years so you should print 2.\n\nIn the second sample, Limak's and Bob's weights in next years are: 12 and 18, then 36 and 36, and finally 108 and 72 (after three years). The answer is 3. Remember that Limak wants to be larger than Bob and he won't be satisfied with equal weights.\n\nIn the third sample, Limak becomes larger than Bob after the first year. Their weights will be 3 and 2 then.", "code": "if __name__ == \"__main__\":\n    a, b = [int(x) for x in input().split(\" \")]\n    year = 0\n    while(a <= b):\n        a *= 3\n        b *= 2\n        year += 1\n    print(year)\n", "score_style": {"score_pep8": 0.875, "score_style": 0.525, "score_var": 0.175}, "score_modularity": 0.0}
{"description": "Constraints\n\n* All values in input are integers.\n* 1\\leq N, M\\leq 12\n* 1\\leq X\\leq 10^5\n* 1\\leq C_i \\leq 10^5\n* 0\\leq A_{i, j} \\leq 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M X\nC_1 A_{1,1} A_{1,2} \\cdots A_{1,M}\nC_2 A_{2,1} A_{2,2} \\cdots A_{2,M}\n\\vdots\nC_N A_{N,1} A_{N,2} \\cdots A_{N,M}\n\n\nOutput\n\nIf the objective is not achievable, print `-1`; otherwise, print the minimum amount of money needed to achieve it.\n\nExamples\n\nInput\n\n3 3 10\n60 2 2 4\n70 8 7 9\n50 2 3 9\n\n\nOutput\n\n120\n\n\nInput\n\n3 3 10\n100 3 1 4\n100 1 5 9\n100 2 6 5\n\n\nOutput\n\n-1\n\n\nInput\n\n8 5 22\n100 3 7 5 3 1\n164 4 5 2 7 8\n334 7 2 7 2 9\n234 4 7 2 8 2\n541 5 4 3 3 6\n235 4 8 6 9 7\n394 3 6 1 6 2\n872 8 4 3 7 2\n\n\nOutput\n\n1067", "code": "n,m,x=map(int,input().split())\nl=[list(map(int,input().split())) for _ in range(n)]\nadd=[]\nfor i in range(2**n):\n    skill=[0]*(m+1)\n    for j in range(n):\n        if ((i>>j)&1):\n            skill=list(map(sum,zip(skill,l[j])))\n    if min(skill[1:])>=x:\n        add.append(skill)\nif add:\n    add.sort()\n    print(add[0][0])\nelse:\n    print(-1)", "score_style": {"score_pep8": 0.5333333333333333, "score_style": 0.35, "score_var": 0.16666666666666669}, "score_modularity": 0.0}
{"description": "Petya loves computer games. Finally a game that he's been waiting for so long came out!\n\nThe main character of this game has n different skills, each of which is characterized by an integer ai from 0 to 100. The higher the number ai is, the higher is the i-th skill of the character. The total rating of the character is calculated as the sum of the values \u200b\u200bof <image> for all i from 1 to n. The expression \u230a x\u230b denotes the result of rounding the number x down to the nearest integer.\n\nAt the beginning of the game Petya got k improvement units as a bonus that he can use to increase the skills of his character and his total rating. One improvement unit can increase any skill of Petya's character by exactly one. For example, if a4 = 46, after using one imporvement unit to this skill, it becomes equal to 47. A hero's skill cannot rise higher more than 100. Thus, it is permissible that some of the units will remain unused.\n\nYour task is to determine the optimal way of using the improvement units so as to maximize the overall rating of the character. It is not necessary to use all the improvement units.\n\nInput\n\nThe first line of the input contains two positive integers n and k (1 \u2264 n \u2264 105, 0 \u2264 k \u2264 107) \u2014 the number of skills of the character and the number of units of improvements at Petya's disposal.\n\nThe second line of the input contains a sequence of n integers ai (0 \u2264 ai \u2264 100), where ai characterizes the level of the i-th skill of the character.\n\nOutput\n\nThe first line of the output should contain a single non-negative integer \u2014 the maximum total rating of the character that Petya can get using k or less improvement units.\n\nExamples\n\nInput\n\n2 4\n7 9\n\n\nOutput\n\n2\n\n\nInput\n\n3 8\n17 15 19\n\n\nOutput\n\n5\n\n\nInput\n\n2 2\n99 100\n\n\nOutput\n\n20\n\nNote\n\nIn the first test case the optimal strategy is as follows. Petya has to improve the first skill to 10 by spending 3 improvement units, and the second skill to 10, by spending one improvement unit. Thus, Petya spends all his improvement units and the total rating of the character becomes equal to  lfloor frac{100}{10} rfloor + lfloor frac{100}{10} rfloor = 10 + 10 =  20.\n\nIn the second test the optimal strategy for Petya is to improve the first skill to 20 (by spending 3 improvement units) and to improve the third skill to 20 (in this case by spending 1 improvement units). Thus, Petya is left with 4 improvement units and he will be able to increase the second skill to 19 (which does not change the overall rating, so Petya does not necessarily have to do it). Therefore, the highest possible total rating in this example is <image>.\n\nIn the third test case the optimal strategy for Petya is to increase the first skill to 100 by spending 1 improvement unit. Thereafter, both skills of the character will be equal to 100, so Petya will not be able to spend the remaining improvement unit. So the answer is equal to <image>. ", "code": "n , s = map ( int , input (). split ()) \nL = [((100-k)%10,k) for k in map(int,input().split())]\nL = sorted ( L )\nsuma=0\nsuma1=0\nfor k in range(n):\n    s-=L[k][0]\n    if(s<0):\n        suma+=L[k][1]//10\n    else:\n        suma+=(L[k][0]+L[k][1])//10\n        suma1+=(100-L[k][1])//10*10\nif(s<0):\n    print(suma)\nelse:\n    if(s<suma1):\n        print(suma+s//10)\n    else:\n        print(suma+suma1//10)\n\n", "score_style": {"score_pep8": 0.368421052631579, "score_style": 0.29254385964912283, "score_var": 0.21666666666666665}, "score_modularity": 0.0}
{"description": "You are given a sequence a consisting of n integers. You may partition this sequence into two sequences b and c in such a way that every element belongs exactly to one of these sequences. \n\nLet B be the sum of elements belonging to b, and C be the sum of elements belonging to c (if some of these sequences is empty, then its sum is 0). What is the maximum possible value of B - C?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in a.\n\nThe second line contains n integers a1, a2, ..., an ( - 100 \u2264 ai \u2264 100) \u2014 the elements of sequence a.\n\nOutput\n\nPrint the maximum possible value of B - C, where B is the sum of elements of sequence b, and C is the sum of elements of sequence c.\n\nExamples\n\nInput\n\n3\n1 -2 0\n\n\nOutput\n\n3\n\n\nInput\n\n6\n16 23 16 15 42 8\n\n\nOutput\n\n120\n\nNote\n\nIn the first example we may choose b = {1, 0}, c = { - 2}. Then B = 1, C = - 2, B - C = 3.\n\nIn the second example we choose b = {16, 23, 16, 15, 42, 8}, c = {} (an empty sequence). Then B = 120, C = 0, B - C = 120.", "code": "n=int(input())\nl=list(map(int,input().split()))\np=[i for i in l if i>0]\nn=[i for i in l if i<0]\nprint(sum(p)-sum(n))", "score_style": {"score_pep8": 0.19999999999999996, "score_style": 0.14999999999999997, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Berland Football Cup starts really soon! Commentators from all over the world come to the event.\n\nOrganizers have already built n commentary boxes. m regional delegations will come to the Cup. Every delegation should get the same number of the commentary boxes. If any box is left unoccupied then the delegations will be upset. So each box should be occupied by exactly one delegation.\n\nIf n is not divisible by m, it is impossible to distribute the boxes to the delegations at the moment.\n\nOrganizers can build a new commentary box paying a burles and demolish a commentary box paying b burles. They can both build and demolish boxes arbitrary number of times (each time paying a corresponding fee). It is allowed to demolish all the existing boxes.\n\nWhat is the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by m)?\n\nInput\n\nThe only line contains four integer numbers n, m, a and b (1 \u2264 n, m \u2264 10^{12}, 1 \u2264 a, b \u2264 100), where n is the initial number of the commentary boxes, m is the number of delegations to come, a is the fee to build a box and b is the fee to demolish a box.\n\nOutput\n\nOutput the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by m). It is allowed that the final number of the boxes is equal to 0.\n\nExamples\n\nInput\n\n9 7 3 8\n\n\nOutput\n\n15\n\n\nInput\n\n2 7 3 7\n\n\nOutput\n\n14\n\n\nInput\n\n30 6 17 19\n\n\nOutput\n\n0\n\nNote\n\nIn the first example organizers can build 5 boxes to make the total of 14 paying 3 burles for the each of them.\n\nIn the second example organizers can demolish 2 boxes to make the total of 0 paying 7 burles for the each of them.\n\nIn the third example organizers are already able to distribute all the boxes equally among the delegations, each one get 5 boxes.", "code": "n,m,a,b=map(int,input().split())\nif(n%m==0):\n  print(0)\nelse:\n  k=n//m\n  s=k*m\n  p=s+m\n  x=abs(n-s)\n  y=abs(n-p)\n  print(min(y*a,x*b))", "score_style": {"score_pep8": 0.09999999999999998, "score_style": 0.09999999999999999, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "You are given an array a consisting of n integers.\n\nYour task is to determine if a has some subsequence of length at least 3 that is a palindrome.\n\nRecall that an array b is called a subsequence of the array a if b can be obtained by removing some (possibly, zero) elements from a (not necessarily consecutive) without changing the order of remaining elements. For example, [2], [1, 2, 1, 3] and [2, 3] are subsequences of [1, 2, 1, 3], but [1, 1, 2] and [4] are not.\n\nAlso, recall that a palindrome is an array that reads the same backward as forward. In other words, the array a of length n is the palindrome if a_i = a_{n - i - 1} for all i from 1 to n. For example, arrays [1234], [1, 2, 1], [1, 3, 2, 2, 3, 1] and [10, 100, 10] are palindromes, but arrays [1, 2] and [1, 2, 3, 1] are not.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nNext 2t lines describe test cases. The first line of the test case contains one integer n (3 \u2264 n \u2264 5000) \u2014 the length of a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 n), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 5000 (\u2211 n \u2264 5000).\n\nOutput\n\nFor each test case, print the answer \u2014 \"YES\" (without quotes) if a has some subsequence of length at least 3 that is a palindrome and \"NO\" otherwise.\n\nExample\n\nInput\n\n\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\nNO\n\nNote\n\nIn the first test case of the example, the array a has a subsequence [1, 2, 1] which is a palindrome.\n\nIn the second test case of the example, the array a has two subsequences of length 3 which are palindromes: [2, 3, 2] and [2, 2, 2].\n\nIn the third test case of the example, the array a has no subsequences of length at least 3 which are palindromes.\n\nIn the fourth test case of the example, the array a has one subsequence of length 4 which is a palindrome: [1, 2, 2, 1] (and has two subsequences of length 3 which are palindromes: both are [1, 2, 1]).\n\nIn the fifth test case of the example, the array a has no subsequences of length at least 3 which are palindromes.", "code": "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    flage=False\n    for i in range(n):\n        if l[i] in l[i+2:n]:\n            flage=True\n            break\n    if flage:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "score_style": {"score_pep8": 0.6153846153846154, "score_style": 0.3910256410256411, "score_var": 0.16666666666666669}, "score_modularity": 0.0}
{"description": "An elephant decided to visit his friend. It turned out that the elephant's house is located at point 0 and his friend's house is located at point x(x > 0) of the coordinate line. In one step the elephant can move 1, 2, 3, 4 or 5 positions forward. Determine, what is the minimum number of steps he need to make in order to get to his friend's house.\n\nInput\n\nThe first line of the input contains an integer x (1 \u2264 x \u2264 1 000 000) \u2014 The coordinate of the friend's house.\n\nOutput\n\nPrint the minimum number of steps that elephant needs to make to get from point 0 to point x.\n\nExamples\n\nInput\n\n5\n\n\nOutput\n\n1\n\n\nInput\n\n12\n\n\nOutput\n\n3\n\nNote\n\nIn the first sample the elephant needs to make one step of length 5 to reach the point x.\n\nIn the second sample the elephant can get to point x if he moves by 3, 5 and 4. There are other ways to get the optimal answer but the elephant cannot reach x in less than three moves.", "code": "n=int(input())\nc=0\nwhile(n!=0):\n    if n>=5:\n        n=n-5\n    elif n>=4:\n        n=n-4\n    elif n>=3:\n        n=n-3\n    elif n>=2:\n        n=n-2\n    elif n>=1:\n        n=n-1\n    c=c+1\nprint(c)", "score_style": {"score_pep8": 0.06666666666666665, "score_style": 0.08333333333333333, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Andrey received a postcard from Irina. It contained only the words \"Hello, Andrey!\", and a strange string consisting of lowercase Latin letters, snowflakes and candy canes. Andrey thought that this string is an encrypted message, and decided to decrypt it.\n\nAndrey noticed that snowflakes and candy canes always stand after the letters, so he supposed that the message was encrypted as follows. Candy cane means that the letter before it can be removed, or can be left. A snowflake means that the letter before it can be removed, left, or repeated several times.\n\nFor example, consider the following string: \n\n<image>\n\nThis string can encode the message \u00abhappynewyear\u00bb. For this, candy canes and snowflakes should be used as follows: \n\n  * candy cane 1: remove the letter w, \n  * snowflake 1: repeat the letter p twice, \n  * candy cane 2: leave the letter n, \n  * snowflake 2: remove the letter w, \n  * snowflake 3: leave the letter e. \n\n<image>\n\nPlease note that the same string can encode different messages. For example, the string above can encode \u00abhayewyar\u00bb, \u00abhapppppynewwwwwyear\u00bb, and other messages.\n\nAndrey knows that messages from Irina usually have a length of k letters. Help him to find out if a given string can encode a message of k letters, and if so, give an example of such a message.\n\nInput\n\nThe first line contains the string received in the postcard. The string consists only of lowercase Latin letters, as well as the characters \u00ab*\u00bb and \u00ab?\u00bb, meaning snowflake and candy cone, respectively. These characters can only appear immediately after the letter. The length of the string does not exceed 200.\n\nThe second line contains an integer number k (1 \u2264 k \u2264 200), the required message length.\n\nOutput\n\nPrint any message of length k that the given string can encode, or \u00abImpossible\u00bb if such a message does not exist.\n\nExamples\n\nInput\n\n\nhw?ap*yn?eww*ye*ar\n12\n\n\nOutput\n\n\nhappynewyear\n\n\nInput\n\n\nab?a\n2\n\n\nOutput\n\n\naa\n\nInput\n\n\nab?a\n3\n\n\nOutput\n\n\naba\n\nInput\n\n\nababb\n5\n\n\nOutput\n\n\nababb\n\nInput\n\n\nab?a\n1\n\n\nOutput\n\n\nImpossible", "code": "import math\n\n\ndef ii():\n    return int(input())\n\n\ndef mi():\n    return map(int, input().split())\n\n\ndef li():\n    return list(mi())\n\n\ns = input()\nk = ii()\na = \"abcdefghijklmnopqrstuvwxyz\"\nf = False\ncount =0\nfor c in s:\n    if c in a:\n        count += 1\n    if c == \"*\":\n        f = True\n\npos = 0\nans = \"\"\nif count < k and f:\n    pos = 1\n    done = False\n    for i in range(len(s)):\n        if s[i]==\"*\" and done == False:\n            ans += s[i-1]*(k-count)\n            done = True\n        else:\n            if s[i] in a:\n                ans += s[i]\nelif count == k:\n    pos = 1\n    for i in range(len(s)):\n        if s[i] in a:\n            ans += s[i]\nelif count > k and len(s) - count >= count-k :\n    pos =1\n    temp = 0\n    done = False\n    for i in range(len(s)-2):\n        if (s[i+1] == \"*\" or s[i+1] == \"?\" ) and not done:\n            temp +=1\n            if temp == count - k:\n                done = True\n        else:\n            if s[i] in a:\n                ans += s[i]\n\n    if done:\n        ans += (s[len(s)-2] if s[len(s)-2] in a else \"\") + (s[len(s)-1] if s[len(s)-1] in a else \"\")\n\nprint(\"Impossible\\n\" if pos ==0 else ans+\"\\n\")\n\n\n\n", "score_style": {"score_pep8": 0.85, "score_style": 0.5386363636363636, "score_var": 0.2272727272727273}, "score_modularity": 0.4}
{"description": "\"Contestant who earns a score equal to or greater than the k-th place finisher's score will advance to the next round, as long as the contestant earns a positive score...\" \u2014 an excerpt from contest rules.\n\nA total of n participants took part in the contest (n \u2265 k), and you already know their scores. Calculate how many participants will advance to the next round.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 k \u2264 n \u2264 50) separated by a single space.\n\nThe second line contains n space-separated integers a1, a2, ..., an (0 \u2264 ai \u2264 100), where ai is the score earned by the participant who got the i-th place. The given sequence is non-increasing (that is, for all i from 1 to n - 1 the following condition is fulfilled: ai \u2265 ai + 1).\n\nOutput\n\nOutput the number of participants who advance to the next round.\n\nExamples\n\nInput\n\n8 5\n10 9 8 7 7 7 5 5\n\n\nOutput\n\n6\n\n\nInput\n\n4 2\n0 0 0 0\n\n\nOutput\n\n0\n\nNote\n\nIn the first example the participant on the 5th place earned 7 points. As the participant on the 6th place also earned 7 points, there are 6 advancers.\n\nIn the second example nobody got a positive score.", "code": "\nif __name__ == \"__main__\":\n    partic,index = input().split()\n    partic = int(partic)\n    index = int(index)   \n    num = input().split()\n\n\n    counter = 0\n    for i in range(0,partic):     \n        if(int(num[i]) >= int(num[index-1]) and int(num[i])>0):\n            counter = counter +1\n    \n    print(counter)\n\n", "score_style": {"score_pep8": 0.46153846153846156, "score_style": 0.4507692307692308, "score_var": 0.44000000000000006}, "score_modularity": 0.0}
{"description": "Capitalization is writing a word with its first letter as a capital letter. Your task is to capitalize the given word.\n\nNote, that during capitalization all the letters except the first one remains unchanged.\n\nInput\n\nA single line contains a non-empty word. This word consists of lowercase and uppercase English letters. The length of the word will not exceed 103.\n\nOutput\n\nOutput the given word after capitalization.\n\nExamples\n\nInput\n\nApPLe\n\n\nOutput\n\nApPLe\n\n\nInput\n\nkonjac\n\n\nOutput\n\nKonjac", "code": "s=input()\nl=s[0]\nm=s[1:]\nk=l.upper()\nprint(k+m)", "score_style": {"score_pep8": 0.19999999999999996, "score_style": 0.14999999999999997, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Bear Limak wants to become the largest of bears, or at least to become larger than his brother Bob.\n\nRight now, Limak and Bob weigh a and b respectively. It's guaranteed that Limak's weight is smaller than or equal to his brother's weight.\n\nLimak eats a lot and his weight is tripled after every year, while Bob's weight is doubled after every year.\n\nAfter how many full years will Limak become strictly larger (strictly heavier) than Bob?\n\nInput\n\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10) \u2014 the weight of Limak and the weight of Bob respectively.\n\nOutput\n\nPrint one integer, denoting the integer number of years after which Limak will become strictly larger than Bob.\n\nExamples\n\nInput\n\n4 7\n\n\nOutput\n\n2\n\n\nInput\n\n4 9\n\n\nOutput\n\n3\n\n\nInput\n\n1 1\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample, Limak weighs 4 and Bob weighs 7 initially. After one year their weights are 4\u00b73 = 12 and 7\u00b72 = 14 respectively (one weight is tripled while the other one is doubled). Limak isn't larger than Bob yet. After the second year weights are 36 and 28, so the first weight is greater than the second one. Limak became larger than Bob after two years so you should print 2.\n\nIn the second sample, Limak's and Bob's weights in next years are: 12 and 18, then 36 and 36, and finally 108 and 72 (after three years). The answer is 3. Remember that Limak wants to be larger than Bob and he won't be satisfied with equal weights.\n\nIn the third sample, Limak becomes larger than Bob after the first year. Their weights will be 3 and 2 then.", "code": "a,b=map(int,input().split())\nx=0\nwhile a<=b:\n\ta=a*3\n\tb=b*2\n\tx=x+1\nprint(x)\n", "score_style": {"score_pep8": 0.1428571428571429, "score_style": 0.12142857142857146, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "[3R2 - Standby for Action](https://www.youtube.com/watch?v=P2ZVC9aoiKo)\n\nOur dear Cafe's owner, JOE Miller, will soon take part in a new game TV-show \"1 vs. n\"!\n\nThe game goes in rounds, where in each round the host asks JOE and his opponents a common question. All participants failing to answer are eliminated. The show ends when only JOE remains (we assume that JOE never answers a question wrong!).\n\nFor each question JOE answers, if there are s (s > 0) opponents remaining and t (0 \u2264 t \u2264 s) of them make a mistake on it, JOE receives \\displaystylet/s dollars, and consequently there will be s - t opponents left for the next question.\n\nJOE wonders what is the maximum possible reward he can receive in the best possible scenario. Yet he has little time before show starts, so can you help him answering it instead?\n\nInput\n\nThe first and single line contains a single integer n (1 \u2264 n \u2264 10^5), denoting the number of JOE's opponents in the show.\n\nOutput\n\nPrint a number denoting the maximum prize (in dollars) JOE could have.\n\nYour answer will be considered correct if it's absolute or relative error won't exceed 10^{-4}. In other words, if your answer is a and the jury answer is b, then it must hold that (|a - b|)/(max(1, b)) \u2264 10^{-4}.\n\nExamples\n\nInput\n\n\n1\n\n\nOutput\n\n\n1.000000000000\n\n\nInput\n\n\n2\n\n\nOutput\n\n\n1.500000000000\n\nNote\n\nIn the second example, the best scenario would be: one contestant fails at the first question, the other fails at the next one. The total reward will be \\displaystyle 1/2 + 1/1 = 1.5 dollars.", "code": "t = 1\nfor _ in range(t):\n    n = int(input())\n    s = sum([1.0 / i for i in range(1, n + 1)])\n    print(s)\n", "score_style": {"score_pep8": 1.0, "score_style": 0.55, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "A star is a figure of the following type: an asterisk character '*' in the center of the figure and four rays (to the left, right, top, bottom) of the same positive length. The size of a star is the length of its rays. The size of a star must be a positive number (i.e. rays of length 0 are not allowed).\n\nLet's consider empty cells are denoted by '.', then the following figures are stars:\n\n<image> The leftmost figure is a star of size 1, the middle figure is a star of size 2 and the rightmost figure is a star of size 3.\n\nYou are given a rectangular grid of size n \u00d7 m consisting only of asterisks '*' and periods (dots) '.'. Rows are numbered from 1 to n, columns are numbered from 1 to m. Your task is to draw this grid using any number of stars or find out that it is impossible. Stars can intersect, overlap or even coincide with each other. The number of stars in the output can't exceed n \u22c5 m. Each star should be completely inside the grid. You can use stars of same and arbitrary sizes.\n\nIn this problem, you do not need to minimize the number of stars. Just find any way to draw the given grid with at most n \u22c5 m stars.\n\nInput\n\nThe first line of the input contains two integers n and m (3 \u2264 n, m \u2264 100) \u2014 the sizes of the given grid.\n\nThe next n lines contains m characters each, the i-th line describes the i-th row of the grid. It is guaranteed that grid consists of characters '*' and '.' only.\n\nOutput\n\nIf it is impossible to draw the given grid using stars only, print \"-1\".\n\nOtherwise in the first line print one integer k (0 \u2264 k \u2264 n \u22c5 m) \u2014 the number of stars needed to draw the given grid. The next k lines should contain three integers each \u2014 x_j, y_j and s_j, where x_j is the row index of the central star character, y_j is the column index of the central star character and s_j is the size of the star. Each star should be completely inside the grid.\n\nExamples\n\nInput\n\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n\n\nOutput\n\n3\n3 4 1\n3 5 2\n3 5 1\n\n\nInput\n\n5 5\n.*...\n****.\n.****\n..**.\n.....\n\n\nOutput\n\n3\n2 2 1\n3 3 1\n3 4 1\n\n\nInput\n\n5 5\n.*...\n***..\n.*...\n.*...\n.....\n\n\nOutput\n\n-1\n\n\nInput\n\n3 3\n*.*\n.*.\n*.*\n\n\nOutput\n\n-1\n\nNote\n\nIn the first example the output \n    \n    \n    2  \n    3 4 1  \n    3 5 2  \n    \n\nis also correct.", "code": "import collections as cc\nimport math as mt\nimport sys\nI=lambda:list(map(int,input().split()))\nn,m=I()\na=[0]*(n+1)\nfor i in range(n):\n    a[i]=list(input())+['.']\na[n]=['.']*m\nused=[[False]*m for i in range(n)]\nans=[]\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == '.':\n            continue\n        k=1\n        while a[i-k][j]=='*' and a[i+k][j]=='*'and a[i][j-k]=='*' and a[i][j+k]=='*':\n            used[i-k][j]=used[i+k][j]=used[i][j-k]=used[i][j+k]=True\n            k+=1\n        if k>1:\n            used[i][j]=True\n            ans+=[[i+1,j+1,k-1]]\nfor i in range(n):\n    for j in range(m):\n        if a[i][j]=='*'and not used[i][j]:\n            print(-1)\n            sys.exit()\nprint(len(ans))\nfor i in ans:\n\tprint(*i)", "score_style": {"score_pep8": 0.4, "score_style": 0.2777777777777778, "score_var": 0.15555555555555556}, "score_modularity": 0.0}
{"description": "Polycarp has guessed three positive integers a, b and c. He keeps these numbers in secret, but he writes down four numbers on a board in arbitrary order \u2014 their pairwise sums (three numbers) and sum of all three numbers (one number). So, there are four numbers on a board in random order: a+b, a+c, b+c and a+b+c.\n\nYou have to guess three numbers a, b and c using given numbers. Print three guessed integers in any order.\n\nPay attention that some given numbers a, b and c can be equal (it is also possible that a=b=c).\n\nInput\n\nThe only line of the input contains four positive integers x_1, x_2, x_3, x_4 (2 \u2264 x_i \u2264 10^9) \u2014 numbers written on a board in random order. It is guaranteed that the answer exists for the given number x_1, x_2, x_3, x_4.\n\nOutput\n\nPrint such positive integers a, b and c that four numbers written on a board are values a+b, a+c, b+c and a+b+c written in some order. Print a, b and c in any order. If there are several answers, you can print any. It is guaranteed that the answer exists.\n\nExamples\n\nInput\n\n\n3 6 5 4\n\n\nOutput\n\n\n2 1 3\n\n\nInput\n\n\n40 40 40 60\n\n\nOutput\n\n\n20 20 20\n\n\nInput\n\n\n201 101 101 200\n\n\nOutput\n\n\n1 100 100", "code": "X = list(map(int, input().split()))\nX.sort()\nprint(str(X[-1]-X[0])+' '+str(X[-1]-X[1])+' '+str(X[-1]-X[2]))", "score_style": {"score_pep8": 1.0, "score_style": 0.55, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "You are given two arrays a and b of positive integers, with length n and m respectively. \n\nLet c be an n \u00d7 m matrix, where c_{i,j} = a_i \u22c5 b_j. \n\nYou need to find a subrectangle of the matrix c such that the sum of its elements is at most x, and its area (the total number of elements) is the largest possible.\n\nFormally, you need to find the largest number s such that it is possible to choose integers x_1, x_2, y_1, y_2 subject to 1 \u2264 x_1 \u2264 x_2 \u2264 n, 1 \u2264 y_1 \u2264 y_2 \u2264 m, (x_2 - x_1 + 1) \u00d7 (y_2 - y_1 + 1) = s, and $$$\u2211_{i=x_1}^{x_2}{\u2211_{j=y_1}^{y_2}{c_{i,j}}} \u2264 x.$$$\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 2000).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 2000).\n\nThe third line contains m integers b_1, b_2, \u2026, b_m (1 \u2264 b_i \u2264 2000).\n\nThe fourth line contains a single integer x (1 \u2264 x \u2264 2 \u22c5 10^{9}).\n\nOutput\n\nIf it is possible to choose four integers x_1, x_2, y_1, y_2 such that 1 \u2264 x_1 \u2264 x_2 \u2264 n, 1 \u2264 y_1 \u2264 y_2 \u2264 m, and \u2211_{i=x_1}^{x_2}{\u2211_{j=y_1}^{y_2}{c_{i,j}}} \u2264 x, output the largest value of (x_2 - x_1 + 1) \u00d7 (y_2 - y_1 + 1) among all such quadruplets, otherwise output 0.\n\nExamples\n\nInput\n\n3 3\n1 2 3\n1 2 3\n9\n\n\nOutput\n\n4\n\n\nInput\n\n5 1\n5 4 2 4 5\n2\n5\n\n\nOutput\n\n1\n\nNote\n\nMatrix from the first sample and the chosen subrectangle (of blue color):\n\n<image>\n\nMatrix from the second sample and the chosen subrectangle (of blue color):\n\n<image>", "code": "from itertools import accumulate\nfrom sys import stdout\n\nR = lambda: map(int, input().split())\nn, m = R()\na, b = list(accumulate(R())), list(R())\nx = int(input())\nres = 0\nfor al in range(1, n + 1):\n    sa = min(ar - al for ar, al in zip(a[al - 1:], [0] + a[:]))\n    l, s = -1, 0\n    for r in range(m):\n        s += b[r] * sa\n        while s > x:\n            l += 1\n            s -= b[l] * sa\n        res = max(res, al * (r - l))\nprint(res)", "score_style": {"score_pep8": 0.8888888888888888, "score_style": 0.5136752136752136, "score_var": 0.13846153846153847}, "score_modularity": 0.0}
{"description": "A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:\n\n<image>\n\nYou start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?\n\nInput\n\nEach test consists of multiple test cases. The first line contains a single integer t (1\u2264 t\u2264 1000) \u2014 the number of test cases. Next t lines contain descriptions of test cases.\n\nEach test case contains a single integer n (1\u2264 n\u2264 10^9) \u2014 the number of cards.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^9.\n\nOutput\n\nFor each test case output a single integer \u2014 the number of pyramids you will have constructed in the end.\n\nExample\n\nInput\n\n\n5\n3\n14\n15\n24\n1\n\n\nOutput\n\n\n1\n2\n1\n3\n0\n\nNote\n\nIn the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.\n\nIn the second test, you build two pyramids, each of height 2, with no cards remaining.\n\nIn the third test, you build one pyramid of height 3, with no cards remaining.\n\nIn the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.\n\nIn the fifth test, one card is not enough to build any pyramids.", "code": "for i in range (int(input())):\n    n=int(input())\n    if(n==1):\n        print(0)\n    else:\n        count=0\n        while(n>1):\n            sum1=2\n            j=0\n            \n            while(n>=sum1):\n                sum2=sum1\n                sum1= (j+2)*2 + j+1 +sum2\n                j+=1\n               \n            count+=1\n            \n            n-=sum2\n            \n        print(count)", "score_style": {"score_pep8": 0.15000000000000002, "score_style": 0.20833333333333334, "score_var": 0.26666666666666666}, "score_modularity": 0.0}
{"description": "You are given string S and T consisting of lowercase English letters.\n\nDetermine if S equals T after rotation.\n\nThat is, determine if S equals T after the following operation is performed some number of times:\n\nOperation: Let S = S_1 S_2 ... S_{|S|}. Change S to S_{|S|} S_1 S_2 ... S_{|S|-1}.\n\nHere, |X| denotes the length of the string X.\n\nConstraints\n\n* 2 \\leq |S| \\leq 100\n* |S| = |T|\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT\n\n\nOutput\n\nIf S equals T after rotation, print `Yes`; if it does not, print `No`.\n\nExamples\n\nInput\n\nkyoto\ntokyo\n\n\nOutput\n\nYes\n\n\nInput\n\nabc\narc\n\n\nOutput\n\nNo\n\n\nInput\n\naaaaaaaaaaaaaaab\naaaaaaaaaaaaaaab\n\n\nOutput\n\nYes", "code": "S = input()\nT = input()\nprint('Yes' if S in T*2 else 'No')", "score_style": {"score_pep8": 1.0, "score_style": 0.55, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Your task is to implement a double linked list.\n\nWrite a program which performs the following operations:\n\n* insert x: insert an element with key x into the front of the list.\n* delete x: delete the first element which has the key of x from the list. If there is not such element, you need not do anything.\n* deleteFirst: delete the first element from the list.\n* deleteLast: delete the last element from the list.\n\nNotes\n\nTemplate in C -->\n\nConstraints\n\n* The number of operations \u2264 2,000,000\n* The number of delete operations \u2264 20\n* 0 \u2264 value of a key \u2264 109\n* The number of elements in the list does not exceed 106\n* For a delete, deleteFirst or deleteLast operation, there is at least one element in the list.\n\nInput\n\nThe input is given in the following format:\n\nn\ncommand1\ncommand2\n...\ncommandn\n\n\nIn the first line, the number of operations n is given. In the following n lines, the above mentioned operations are given in the following format:\n\n* insert x\n* delete x\n* deleteFirst\n* deleteLast\n\nOutput\n\nPrint all the element (key) in the list after the given operations. Two consequtive keys should be separated by a single space.\n\nExamples\n\nInput\n\n7\ninsert 5\ninsert 2\ninsert 3\ninsert 1\ndelete 3\ninsert 6\ndelete 5\n\n\nOutput\n\n6 1 2\n\n\nInput\n\n9\ninsert 5\ninsert 2\ninsert 3\ninsert 1\ndelete 3\ninsert 6\ndelete 5\ndeleteFirst\ndeleteLast\n\n\nOutput\n\n1", "code": "from collections import deque\nimport sys\n\nn = int(input())\nresult = deque()\nfunc = {'insert':result.appendleft,\\\n        'delete':result.remove,\\\n        'deleteFirst':result.popleft,\\\n        'deleteLast':result.pop}\n\nfor line in sys.stdin.readlines():\n    c = line.split()\n    if len(c) > 1:\n        try:\n            func[c[0]](int(c[1]))\n        except:\n            continue\n    else:\n        func[c[0]]()\n\nprint(*result)\n\n", "score_style": {"score_pep8": 0.7619047619047619, "score_style": 0.540952380952381, "score_var": 0.32}, "score_modularity": 0.0}
{"description": "The only difference between easy and hard versions is constraints.\n\nThere are n kids, each of them is reading a unique book. At the end of any day, the i-th kid will give his book to the p_i-th kid (in case of i = p_i the kid will give his book to himself). It is guaranteed that all values of p_i are distinct integers from 1 to n (i.e. p is a permutation). The sequence p doesn't change from day to day, it is fixed.\n\nFor example, if n=6 and p=[4, 6, 1, 3, 5, 2] then at the end of the first day the book of the 1-st kid will belong to the 4-th kid, the 2-nd kid will belong to the 6-th kid and so on. At the end of the second day the book of the 1-st kid will belong to the 3-th kid, the 2-nd kid will belong to the 2-th kid and so on.\n\nYour task is to determine the number of the day the book of the i-th child is returned back to him for the first time for every i from 1 to n.\n\nConsider the following example: p = [5, 1, 2, 4, 3]. The book of the 1-st kid will be passed to the following kids:\n\n  * after the 1-st day it will belong to the 5-th kid, \n  * after the 2-nd day it will belong to the 3-rd kid, \n  * after the 3-rd day it will belong to the 2-nd kid, \n  * after the 4-th day it will belong to the 1-st kid. \n\n\n\nSo after the fourth day, the book of the first kid will return to its owner. The book of the fourth kid will return to him for the first time after exactly one day.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 200) \u2014 the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 \u2264 n \u2264 200) \u2014 the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.\n\nOutput\n\nFor each query, print the answer on it: n integers a_1, a_2, ..., a_n, where a_i is the number of the day the book of the i-th child is returned back to him for the first time in this query.\n\nExample\n\nInput\n\n\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\n\nOutput\n\n\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4 ", "code": "def solve(n, p):    \n    sol = [0] * (n + 1)\n    pos = list(range(0, n + 1))    \n    solved = 0\n    day = 1    \n    while solved < n:\n        new_pos = [0] * (n + 1)\n        idx = 1\n        for per in p:\n            new_pos[per] = pos[idx]\n            if sol[idx]==0 and new_pos[per] == per:\n                solved += 1\n                sol[idx] = day\n            idx += 1\n        pos = new_pos\n        \n        day += 1\n    for v in sol[1:]:\n        print(v, end=' ')\n    print()    \n\nqueries = int(input())\nfor i in range(queries):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    solve(n, p)\n", "score_style": {"score_pep8": 0.7307692307692308, "score_style": 0.5192307692307693, "score_var": 0.3076923076923077}, "score_modularity": 1.0}
{"description": "Vlad likes to eat in cafes very much. During his life, he has visited cafes n times. Unfortunately, Vlad started to feel that his last visits are not any different from each other. To fix that Vlad had a small research.\n\nFirst of all, Vlad assigned individual indices to all cafes. Then, he wrote down indices of cafes he visited in a row, in order of visiting them. Now, Vlad wants to find such a cafe that his last visit to that cafe was before his last visits to every other cafe. In other words, he wants to find such a cafe that he hasn't been there for as long as possible. Help Vlad to find that cafe.\n\nInput\n\nIn first line there is one integer n (1 \u2264 n \u2264 2\u00b7105) \u2014 number of cafes indices written by Vlad.\n\nIn second line, n numbers a1, a2, ..., an (0 \u2264 ai \u2264 2\u00b7105) are written \u2014 indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.\n\nOutput\n\nPrint one integer \u2014 index of the cafe that Vlad hasn't visited for as long as possible.\n\nExamples\n\nInput\n\n5\n1 3 2 1 2\n\n\nOutput\n\n3\n\n\nInput\n\n6\n2 1 2 2 4 1\n\n\nOutput\n\n2\n\nNote\n\nIn first test, there are three cafes, and the last visits to cafes with indices 1 and 2 were after the last visit to cafe with index 3; so this cafe is the answer. \n\nIn second test case, there are also three cafes, but with indices 1, 2 and 4. Cafes with indices 1 and 4 were visited after the last visit of cafe with index 2, so the answer is 2. Note that Vlad could omit some numbers while numerating the cafes.", "code": "n = int(input())\na = list(map(int,input().split()))\nb = set(a)\nfor i in range(n-1,-1,-1):\n    b.discard(a[i])\n    if not b:\n        print(a[i])\n        break\n", "score_style": {"score_pep8": 0.75, "score_style": 0.425, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Berland shop sells n kinds of juices. Each juice has its price c_i. Each juice includes some set of vitamins in it. There are three types of vitamins: vitamin \"A\", vitamin \"B\" and vitamin \"C\". Each juice can contain one, two or all three types of vitamins in it.\n\nPetya knows that he needs all three types of vitamins to stay healthy. What is the minimum total price of juices that Petya has to buy to obtain all three vitamins? Petya obtains some vitamin if he buys at least one juice containing it and drinks it.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1 000) \u2014 the number of juices.\n\nEach of the next n lines contains an integer c_i (1 \u2264 c_i \u2264 100 000) and a string s_i \u2014 the price of the i-th juice and the vitamins it contains. String s_i contains from 1 to 3 characters, and the only possible characters are \"A\", \"B\" and \"C\". It is guaranteed that each letter appears no more than once in each string s_i. The order of letters in strings s_i is arbitrary.\n\nOutput\n\nPrint -1 if there is no way to obtain all three vitamins. Otherwise print the minimum total price of juices that Petya has to buy to obtain all three vitamins.\n\nExamples\n\nInput\n\n4\n5 C\n6 B\n16 BAC\n4 A\n\n\nOutput\n\n15\n\n\nInput\n\n2\n10 AB\n15 BA\n\n\nOutput\n\n-1\n\n\nInput\n\n5\n10 A\n9 BC\n11 CA\n4 A\n5 B\n\n\nOutput\n\n13\n\n\nInput\n\n6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\n\n\nOutput\n\n250\n\n\nInput\n\n2\n5 BA\n11 CB\n\n\nOutput\n\n16\n\nNote\n\nIn the first example Petya buys the first, the second and the fourth juice. He spends 5 + 6 + 4 = 15 and obtains all three vitamins. He can also buy just the third juice and obtain three vitamins, but its cost is 16, which isn't optimal.\n\nIn the second example Petya can't obtain all three vitamins, as no juice contains vitamin \"C\".", "code": "a = int(input())\nd = 1000000000000000000\nE = {'A':d,'B':d,'C':d,'AB':d,'BA':d,'CA':d,'AC':d,'BC':d,'CB':d,'ACB':d,'BAC':d,'BCA':d,'CAB':d,'CBA':d,'ABC':d}\nfor _ in range(a):\n    b,c =input().split()\n    if E[c] > int(b):\n        E[c]=int(b)\nf=min((E['A']+E['B']+E['C']),E['A']+E['CB'],E['A']+E['BC'],E['B']+E['AC'],E['B']+E['CA'],E['C']+E['AB'],E['C']+E['BA'],E['ABC'],E['ACB'],E['BAC'],E['BCA'],E['CAB'],E['CBA'],E['AB']+E['AC'],E['AB']+E['CB'],E['BA']+E['BC'],E['BA']+E['AC'],E['AC']+E['CB'],E['CA']+E['BA'],E['CA']+E['CB'],E['BC']+E['AC'],E['BC']+E['AB'],E['CB']+E['AC'],E['BA']+E['CB'],E['AB']+E['CA'])\nif (f ==d):\n    print(-1)\nelse:\n    print(f)", "score_style": {"score_pep8": 0.5833333333333333, "score_style": 0.3416666666666666, "score_var": 0.1}, "score_modularity": 0.0}
{"description": "Recently a dog was bought for Polycarp. The dog's name is Cormen. Now Polycarp has a lot of troubles. For example, Cormen likes going for a walk. \n\nEmpirically Polycarp learned that the dog needs at least k walks for any two consecutive days in order to feel good. For example, if k = 5 and yesterday Polycarp went for a walk with Cormen 2 times, today he has to go for a walk at least 3 times. \n\nPolycarp analysed all his affairs over the next n days and made a sequence of n integers a1, a2, ..., an, where ai is the number of times Polycarp will walk with the dog on the i-th day while doing all his affairs (for example, he has to go to a shop, throw out the trash, etc.).\n\nHelp Polycarp determine the minimum number of walks he needs to do additionaly in the next n days so that Cormen will feel good during all the n days. You can assume that on the day before the first day and on the day after the n-th day Polycarp will go for a walk with Cormen exactly k times. \n\nWrite a program that will find the minumum number of additional walks and the appropriate schedule \u2014 the sequence of integers b1, b2, ..., bn (bi \u2265 ai), where bi means the total number of walks with the dog on the i-th day.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 500) \u2014 the number of days and the minimum number of walks with Cormen for any two consecutive days. \n\nThe second line contains integers a1, a2, ..., an (0 \u2264 ai \u2264 500) \u2014 the number of walks with Cormen on the i-th day which Polycarp has already planned. \n\nOutput\n\nIn the first line print the smallest number of additional walks that Polycarp should do during the next n days so that Cormen will feel good during all days. \n\nIn the second line print n integers b1, b2, ..., bn, where bi \u2014 the total number of walks on the i-th day according to the found solutions (ai \u2264 bi for all i from 1 to n). If there are multiple solutions, print any of them. \n\nExamples\n\nInput\n\n3 5\n2 0 1\n\n\nOutput\n\n4\n2 3 2\n\n\nInput\n\n3 1\n0 0 0\n\n\nOutput\n\n1\n0 1 0\n\n\nInput\n\n4 6\n2 4 3 5\n\n\nOutput\n\n0\n2 4 3 5", "code": "def solve():\n    n,k=map(int,input().strip().split())\n    l=list(map(int,input().strip().split()))\n    c=0\n    r=[0]*n\n    r[0]=l[0]\n    for i in range(1,n):\n        x=k-l[i-1]\n        if x>l[i]:\n            c+=(x-l[i])\n            l[i]=x\n        else:\n            pass\n    print(c)\n    print(\" \".join(map(str,l)))\n\nif __name__==\"__main__\":\n    solve()\n", "score_style": {"score_pep8": 0.33333333333333337, "score_style": 0.21666666666666667, "score_var": 0.1}, "score_modularity": 1.0}
{"description": "One hot summer day Pete and his friend Billy decided to buy a watermelon. They chose the biggest and the ripest one, in their opinion. After that the watermelon was weighed, and the scales showed w kilos. They rushed home, dying of thirst, and decided to divide the berry, however they faced a hard problem.\n\nPete and Billy are great fans of even numbers, that's why they want to divide the watermelon in such a way that each of the two parts weighs even number of kilos, at the same time it is not obligatory that the parts are equal. The boys are extremely tired and want to start their meal as soon as possible, that's why you should help them and find out, if they can divide the watermelon in the way they want. For sure, each of them should get a part of positive weight.\n\nInput\n\nThe first (and the only) input line contains integer number w (1 \u2264 w \u2264 100) \u2014 the weight of the watermelon bought by the boys.\n\nOutput\n\nPrint YES, if the boys can divide the watermelon into two parts, each of them weighing even number of kilos; and NO in the opposite case.\n\nExamples\n\nInput\n\n8\n\n\nOutput\n\nYES\n\nNote\n\nFor example, the boys can divide the watermelon into two parts of 2 and 6 kilos respectively (another variant \u2014 two parts of 4 and 4 kilos).", "code": "w = int(input())\ndef check_w(w):\n    return w%2==0\nif w > 2 :\n    if check_w(w) : \n        print(\"YES\")\n    else :\n        print(\"NO\")\nelse : \n    print(\"NO\")\n", "score_style": {"score_pep8": 0.4, "score_style": 0.25, "score_var": 0.1}, "score_modularity": 1.0}
{"description": "Lee was cleaning his house for the party when he found a messy string under the carpets. Now he'd like to make it clean accurately and in a stylish way...\n\nThe string s he found is a binary string of length n (i. e. string consists only of 0-s and 1-s).\n\nIn one move he can choose two consecutive characters s_i and s_{i+1}, and if s_i is 1 and s_{i + 1} is 0, he can erase exactly one of them (he can choose which one to erase but he can't erase both characters simultaneously). The string shrinks after erasing.\n\nLee can make an arbitrary number of moves (possibly zero) and he'd like to make the string s as clean as possible. He thinks for two different strings x and y, the shorter string is cleaner, and if they are the same length, then the lexicographically smaller string is cleaner.\n\nNow you should answer t test cases: for the i-th test case, print the cleanest possible string that Lee can get by doing some number of moves.\n\nSmall reminder: if we have two strings x and y of the same length then x is lexicographically smaller than y if there is a position i such that x_1 = y_1, x_2 = y_2,..., x_{i - 1} = y_{i - 1} and x_i < y_i.\n\nInput\n\nThe first line contains the integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. \n\nNext 2t lines contain test cases \u2014 one per two lines.\n\nThe first line of each test case contains the integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string s.\n\nThe second line contains the binary string s. The string s is a string of length n which consists only of zeroes and ones.\n\nIt's guaranteed that sum of n over test cases doesn't exceed 10^5.\n\nOutput\n\nPrint t answers \u2014 one per test case.\n\nThe answer to the i-th test case is the cleanest string Lee can get after doing some number of moves (possibly zero).\n\nExample\n\nInput\n\n\n5\n10\n0001111111\n4\n0101\n8\n11001101\n10\n1110000000\n1\n1\n\n\nOutput\n\n\n0001111111\n001\n01\n0\n1\n\nNote\n\nIn the first test case, Lee can't perform any moves.\n\nIn the second test case, Lee should erase s_2.\n\nIn the third test case, Lee can make moves, for example, in the following order: 11001101 \u2192 1100101 \u2192 110101 \u2192 10101 \u2192 1101 \u2192 101 \u2192 01.", "code": "t=int(input())\nfor i in range(t):\n    n=int(input())\n    s=input()\n    b=[]\n    for j in s:\n        b.append(j)\n    j=0\n    c=[]\n    d=[]\n    while(j<n):\n        if b[j]==\"0\":\n            c.append(j)\n        else:\n            d.append(j)\n        j+=1\n\n    j = 0\n    s = 0\n    d.append(n)\n    while (j < len(d) - 1):\n        if d[j + 1] - d[j] > 1:\n            s = 1\n            break\n        j += 1\n\n    if c==[]:\n        c.append(-1)\n    m=(n-1-c[-1])\n    r=(d[0])\n\n    print(\"\".join([\"0\"]*(r))+\"\".join([\"0\"]*(s))+\"\".join([\"1\"]*(m)))\n\n\n\n", "score_style": {"score_pep8": 0.59375, "score_style": 0.346875, "score_var": 0.1}, "score_modularity": 0.0}

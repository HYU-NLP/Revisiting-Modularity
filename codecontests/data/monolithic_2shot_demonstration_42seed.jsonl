{"problem_description": ["Pasha loves to send strictly positive integers to his friends. Pasha cares about security, therefore when he wants to send an integer n, he encrypts it in the following way: he picks three integers a, b and c such that l \u2264 a,b,c \u2264 r, and then he computes the encrypted value m = n \u22c5 a + b - c.\n\nUnfortunately, an adversary intercepted the values l, r and m. Is it possible to recover the original values of a, b and c from this information? More formally, you are asked to find any values of a, b and c such that\n\n  * a, b and c are integers, \n  * l \u2264 a, b, c \u2264 r, \n  * there exists a strictly positive integer n, such that n \u22c5 a + b - c = m. \n\nInput\n\nThe first line contains the only integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases. The following t lines describe one test case each.\n\nEach test case consists of three integers l, r and m (1 \u2264 l \u2264 r \u2264 500 000, 1 \u2264 m \u2264 10^{10}). The numbers are such that the answer to the problem exists.\n\nOutput\n\nFor each test case output three integers a, b and c such that, l \u2264 a, b, c \u2264 r and there exists a strictly positive integer n such that n \u22c5 a + b - c = m. It is guaranteed that there is at least one possible solution, and you can output any possible combination if there are multiple solutions.\n\nExample\n\nInput\n\n\n2\n4 6 13\n2 3 1\n\n\nOutput\n\n\n4 6 5\n2 2 3\n\nNote\n\nIn the first example n = 3 is possible, then n \u22c5 4 + 6 - 5 = 13 = m. Other possible solutions include: a = 4, b = 5, c = 4 (when n = 3); a = 5, b = 4, c = 6 (when n = 3); a = 6, b = 6, c = 5 (when n = 2); a = 6, b = 5, c = 4 (when n = 2).\n\nIn the second example the only possible case is n = 1: in this case n \u22c5 2 + 2 - 3 = 1 = m. Note that, n = 0 is not possible, since in that case n is not a strictly positive integer.", "You are given three integers x, y and n. Your task is to find the maximum integer k such that 0 \u2264 k \u2264 n that k mod x = y, where mod is modulo operation. Many programming languages use percent operator % to implement it.\n\nIn other words, with given x, y and n you need to find the maximum possible integer from 0 to n that has the remainder y modulo x.\n\nYou have to answer t independent test cases. It is guaranteed that such k exists for each test case.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 5 \u22c5 10^4) \u2014 the number of test cases. The next t lines contain test cases.\n\nThe only line of the test case contains three integers x, y and n (2 \u2264 x \u2264 10^9;~ 0 \u2264 y < x;~ y \u2264 n \u2264 10^9).\n\nIt can be shown that such k always exists under the given constraints.\n\nOutput\n\nFor each test case, print the answer \u2014 maximum non-negative integer k such that 0 \u2264 k \u2264 n and k mod x = y. It is guaranteed that the answer always exists.\n\nExample\n\nInput\n\n\n7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n\n\nOutput\n\n\n12339\n0\n15\n54306\n999999995\n185\n999999998\n\nNote\n\nIn the first test case of the example, the answer is 12339 = 7 \u22c5 1762 + 5 (thus, 12339 mod 7 = 5). It is obvious that there is no greater integer not exceeding 12345 which has the remainder 5 modulo 7."], "public_tests": [{"input": ["2\n4 6 13\n2 3 1\n"], "output": ["4 5 4\n2 2 3\n"]}, {"input": ["7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n"], "output": ["12339\n0\n15\n54306\n999999995\n185\n999999998\n"]}], "private_tests": [{"input": ["20\n10 12 43\n25 49 1\n5 7 39\n8 9 44\n16 17 50\n30 40 975\n601 801 1000\n100 102 909\n599 799 1000\n503 997 9\n194 383 5\n90000 100000 709999\n75000 100000 124999\n375000 499999 625001\n375000 500000 624999\n300000 400000 499999\n250000 500000 1\n70000 80000 2272770257\n70000 80000 9999953344\n90000 100000 9999955820\n", "20\n375000 500000 624999\n375000 499999 624997\n375003 499999 624995\n375002 499999 624995\n375001 499999 624996\n375002 499999 624996\n375001 499999 624997\n375000 499999 624991\n375000 499999 624995\n375000 499999 624994\n375000 499999 624993\n375000 499999 624998\n375000 499999 624996\n375000 499999 624992\n375000 499999 624988\n375000 499999 624986\n375000 499999 624982\n375000 499999 624990\n375000 499999 624991\n375000 499999 624989\n", "20\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n250000 500000 1\n", "4\n4 6 12\n1 1 1\n2 2 2\n3 3 3\n", "20\n1 500000 10000000000\n500000 500000 10000000000\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n", "7\n375000 499999 624997\n375000 500000 624999\n375000 499999 624995\n375000 499999 624994\n375000 499999 624993\n375000 499999 624998\n375000 499999 624996\n", "20\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n375000 500000 624999\n", "1\n1 4 10000000000\n"], "output": ["11 10 11\n25 25 49\n5 5 6\n9 8 9\n17 16 17\n35 30 35\n800 801 601\n101 100 100\n599 599 797\n503 503 997\n194 194 383\n100000 99999 90000\n99999 100000 75000\n375000 375000 499999\n499999 500000 375000\n399999 400000 300000\n250000 250000 499999\n70007 70000 76998\n70009 77802 70000\n90003 90000 97501\n", "499999 500000 375000\n499998 499999 375000\n499999 499999 375003\n499998 499999 375002\n499998 499999 375001\n499999 499999 375002\n499999 499999 375001\n499992 499999 375000\n499996 499999 375000\n499995 499999 375000\n499994 499999 375000\n499999 499999 375000\n499997 499999 375000\n499993 499999 375000\n499989 499999 375000\n499987 499999 375000\n499983 499999 375000\n499991 499999 375000\n499992 499999 375000\n499990 499999 375000\n", "250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n250000 250000 499999\n", "4 4 4\n1 1 1\n2 2 2\n3 3 3\n", "1 1 1\n500000 500000 500000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n", "499998 499999 375000\n499999 500000 375000\n499996 499999 375000\n499995 499999 375000\n499994 499999 375000\n499999 499999 375000\n499997 499999 375000\n", "499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n499999 500000 375000\n", "1 1 1\n"]}, {"input": ["1\n31 2 104\n", "1\n43284 1 33424242\n", "1\n943643 1 23522222\n", "1\n33 6 100\n", "1\n1000000000 0 999999999\n", "1\n4452384 1 3573842\n"], "output": ["95\n", "33415249\n", "22647433\n", "72\n", "0\n", "1\n"]}], "transformed_sc": ["\nfor _ in range(int(input())):\n    l, r, m = map(int, input().split())\n    for a in range(l, r + 1):\n        minn = m // a\n        maxn = 0 - -m // a\n        if l - r <= m - minn * a <= r - l and minn > 0:\n            m -= minn * a\n            for b in range(l, r + 1):\n                if -r <= m - b <= -l:\n                    c = b - m\n                    print(a,b,c)\n                    break\n            break\n        if l - r <= m - maxn * a <= r - l:\n            m -= maxn * a\n            for b in range(l, r + 1):\n                if -r <= m - b <= -l:\n                    c = b - m\n                    print(a,b,c)\n                    break\n            break\n                            ", "test_cases = int(input())\nfor _ in range(test_cases):\n    x, y, n = map(int, input().split())\n    if n < x and y == 0:\n        print(0)\n    elif n < x and y == 1:\n        print(1)\n    elif n % x == y:\n        print(n)\n    else:\n        if x == 2 and y == 1 and n == 1:\n            print(1)\n        elif n % x < y:\n            print(n - ((n % x) + (x - y)))\n        else:\n            print(n - ((n % x) - y))"], "sc": ["for _ in range(int(input())):\n  l,r,m=map(int,input().split())\n  for a in range(l,r+1):\n    minn=m//a\n    maxn=0--m//a\n    if l-r<=m-minn*a<=r-l and minn>0:\n      m-=minn*a\n      for b in range(l,r+1):\n        if -r<=m-b<=-l:\n          print(a,b,b-m)\n          break\n      break\n    if l-r<=m-maxn*a<=r-l:\n      m-=maxn*a\n      for b in range(l,r+1):\n        if -r<=m-b<=-l:\n          print(a,b,b-m)\n          break\n      break", "n = int(input())\nfor i in range(n):\n    x,y,n = map(int,input().split())\n    if n < x and y == 0:\n        print(0)\n    elif n < x and y == 1:\n        print(1)\n    elif n%x == y:\n        print(n)\n    else:\n        if x == 2 and y == 1 and n == 1:\n            print(1)\n        elif n%x < y:\n            print(n-((n%x)+(x-y)))\n        else:\n            print(n - ((n%x) - y))"], "sc_cc": [10.0, 11.0], "transformed_mc": ["\ndef find_values(l, r, m):\n    for a in range(l, r + 1):\n        minn = m // a\n        maxn = 0 - -m // a\n        if l - r <= m - minn * a <= r - l and minn > 0:\n            m -= minn * a\n            for b in range(l, r + 1):\n                if -r <= m - b <= -l:\n                    return a, b, b - m\n        if l - r <= m - maxn * a <= r - l:\n            m -= maxn * a\n            for b in range(l, r + 1):\n                if -r <= m - b <= -l:\n                    return a, b, b - m\n\ndef main():\n    for _ in range(int(input())):\n        l, r, m = map(int, input().split())\n        a, b, c = find_values(l, r, m)\n        print(a, b, c)\n\nif __name__ == '__main__':\n    main()\n", "\ndef find_maximum_k(x, y, n):\n    if n < x and y == 0:\n        return 0\n    elif n < x and y == 1:\n        return 1\n    elif n % x == y:\n        return n\n    else:\n        if x == 2 and y == 1 and n == 1:\n            return 1\n        elif n % x < y:\n            return n - ((n % x) + (x - y))\n        else:\n            return n - ((n % x) - y)\n\ndef main():\n    test_cases = int(input())\n    for _ in range(test_cases):\n        x, y, n = map(int, input().split())\n        print(find_maximum_k(x, y, n))\n\nif __name__ == '__main__':\n    main()\n"]}

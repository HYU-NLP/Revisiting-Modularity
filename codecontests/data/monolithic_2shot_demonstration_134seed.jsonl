{"problem_description": ["Nauuo is a girl who loves writing comments.\n\nOne day, she posted a comment on Codeforces, wondering whether she would get upvotes or downvotes.\n\nIt's known that there were x persons who would upvote, y persons who would downvote, and there were also another z persons who would vote, but you don't know whether they would upvote or downvote. Note that each of the x+y+z people would vote exactly one time.\n\nThere are three different results: if there are more people upvote than downvote, the result will be \"+\"; if there are more people downvote than upvote, the result will be \"-\"; otherwise the result will be \"0\".\n\nBecause of the z unknown persons, the result may be uncertain (i.e. there are more than one possible results). More formally, the result is uncertain if and only if there exist two different situations of how the z persons vote, that the results are different in the two situations.\n\nTell Nauuo the result or report that the result is uncertain.\n\nInput\n\nThe only line contains three integers x, y, z (0\u2264 x,y,z\u2264100), corresponding to the number of persons who would upvote, downvote or unknown.\n\nOutput\n\nIf there is only one possible result, print the result : \"+\", \"-\" or \"0\".\n\nOtherwise, print \"?\" to report that the result is uncertain.\n\nExamples\n\nInput\n\n\n3 7 0\n\n\nOutput\n\n\n-\n\nInput\n\n\n2 0 1\n\n\nOutput\n\n\n+\n\nInput\n\n\n1 1 0\n\n\nOutput\n\n\n0\n\nInput\n\n\n0 0 1\n\n\nOutput\n\n\n?\n\nNote\n\nIn the first example, Nauuo would definitely get three upvotes and seven downvotes, so the only possible result is \"-\".\n\nIn the second example, no matter the person unknown downvotes or upvotes, Nauuo would get more upvotes than downvotes. So the only possible result is \"+\".\n\nIn the third example, Nauuo would definitely get one upvote and one downvote, so the only possible result is \"0\".\n\nIn the fourth example, if the only one person upvoted, the result would be \"+\", otherwise, the result would be \"-\". There are two possible results, so the result is uncertain.", "You have a sequence a with n elements 1, 2, 3, ..., k - 1, k, k - 1, k - 2, ..., k - (n - k) (k \u2264 n < 2k).\n\nLet's call as inversion in a a pair of indices i < j such that a[i] > a[j].\n\nSuppose, you have some permutation p of size k and you build a sequence b of size n in the following manner: b[i] = p[a[i]].\n\nYour goal is to find such permutation p that the total number of inversions in b doesn't exceed the total number of inversions in a, and b is lexicographically maximum.\n\nSmall reminder: the sequence of k integers is called a permutation if it contains all integers from 1 to k exactly once.\n\nAnother small reminder: a sequence s is lexicographically smaller than another sequence t, if either s is a prefix of t, or for the first i such that s_i \u2260 t_i, s_i < t_i holds (in the first position that these sequences are different, s has smaller number than t).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (k \u2264 n < 2k; 1 \u2264 k \u2264 10^5) \u2014 the length of the sequence a and its maximum.\n\nIt's guaranteed that the total sum of k over test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, print k integers \u2014 the permutation p which maximizes b lexicographically without increasing the total number of inversions.\n\nIt can be proven that p exists and is unique.\n\nExample\n\nInput\n\n\n4\n1 1\n2 2\n3 2\n4 3\n\n\nOutput\n\n\n1 \n1 2 \n2 1 \n1 3 2 \n\nNote\n\nIn the first test case, the sequence a = [1], there is only one permutation p = [1].\n\nIn the second test case, the sequence a = [1, 2]. There is no inversion in a, so there is only one permutation p = [1, 2] which doesn't increase the number of inversions.\n\nIn the third test case, a = [1, 2, 1] and has 1 inversion. If we use p = [2, 1], then b = [p[a[1]], p[a[2]], p[a[3]]] = [2, 1, 2] and also has 1 inversion.\n\nIn the fourth test case, a = [1, 2, 3, 2], and since p = [1, 3, 2] then b = [1, 3, 2, 3]. Both a and b have 1 inversion and b is the lexicographically maximum."], "public_tests": [{"input": ["3 7 0\n", "1 1 0\n", "0 0 1\n", "2 0 1\n"], "output": ["-", "0", "?", "+"]}, {"input": ["4\n1 1\n2 2\n3 2\n4 3\n"], "output": ["\n1 \n1 2 \n2 1 \n1 3 2 \n"]}], "private_tests": [{"input": ["100 0 100\n", "80 63 18\n", "25 12 100\n", "80 29 11\n", "10 5 6\n", "94 37 25\n", "98 82 13\n", "21 24 18\n", "1 2 2\n", "88 88 0\n", "73 29 43\n", "58 83 39\n", "97 33 19\n", "1 3 4\n", "100 100 0\n", "62 63 12\n", "99 20 7\n", "21 52 5\n", "43 9 61\n", "45 0 44\n", "7 4 4\n", "100 100 100\n", "34 51 3\n", "0 0 100\n", "3 3 2\n", "34 44 21\n", "87 98 19\n", "60 60 32\n", "22 99 77\n", "28 99 70\n", "33 24 13\n", "79 42 12\n", "48 100 48\n", "58 97 4\n", "52 14 10\n", "12 1 11\n", "5 2 10\n", "93 21 2\n", "8 5 5\n", "58 83 8\n", "97 64 6\n", "49 8 6\n", "13 6 8\n", "82 98 93\n", "7 4 3\n", "37 5 15\n", "100 0 99\n", "21 50 0\n", "0 100 48\n", "5 7 1\n", "42 40 4\n", "36 3 35\n", "8 87 7\n", "21 55 9\n", "0 0 0\n", "78 95 14\n", "0 100 99\n", "25 39 32\n", "89 41 36\n", "82 84 16\n", "25 35 23\n", "47 78 6\n", "42 43 16\n", "1 1 1\n", "1 0 1\n", "43 93 9\n", "3 4 5\n", "92 93 10\n", "0 87 13\n", "1 50 50\n", "100 0 48\n", "13 1 13\n", "19 90 4\n", "2 2 1\n", "98 44 17\n", "2 1 3\n", "2 82 17\n", "40 51 11\n", "83 3 8\n", "96 71 19\n", "62 56 5\n", "21 31 14\n", "50 100 50\n", "0 100 0\n", "96 55 0\n", "26 92 6\n", "6 5 4\n", "97 71 36\n", "74 2 16\n", "66 27 9\n", "47 40 10\n", "7 3 5\n", "3 2 3\n", "5 1 6\n", "86 1 0\n", "46 1 89\n", "5 3 3\n", "60 33 15\n", "4 3 1\n", "12 89 2\n", "5 5 3\n", "9 8 2\n", "100 48 48\n", "97 78 2\n", "1 2 7\n", "2 87 10\n", "15 4 15\n", "58 58 1\n", "5 3 2\n", "100 50 50\n"], "output}, {"input": [], "output": []}], "transformed_sc": ["x, y, z = map(int, input().split())\nif (x+z) == y and (z+y) == x:\n    print(\"0\")\nelif (x+z) >= y and (z+y) >= x:\n    print(\"?\")\nelif x > y or (x+z) > y and (y+z) < x:\n    print(\"+\")\nelif y > x or (y+z) > x and (x+z) < y:\n    print(\"-\")", "test_cases = int(input())\nfor _ in range(test_cases):\n    n, k = map(int, input().split())\n    r = [y + 1 for y in range(k)]\n    sequence = []\n    h = 1\n    t = 0\n    for _ in range(n):\n        if t == 0:\n            sequence.append(h)\n            h += 1\n            if h > k:\n                h = k - 1\n                t = -1\n        else:\n            sequence.append(h)\n            h -= 1\n            if h <= 0:\n                h = 1\n                t = 0\n\n    freq_map = {}\n    for num in sequence:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    p = max(freq_map.keys())\n    for num, freq in freq_map.items():\n        if freq > 1:\n            p = num - 1\n            break\n            \n    z = r[p:]\n    z.sort(reverse=True)\n    result = r[:p] + z\n\n    print(*result)"], "sc": ["x,y,z=input().split()\nx=int(x)\ny=int(y)\nz=int(z)\nif (x+z)==y and (z+y)==x :\n    print(\"0\")\nelif (x+z)>=y and (z+y)>=x:\n    print(\"?\")\nelif x>y or (x+z)>y and (y+z)<x:\n    print(\"+\")\nelif y>x or (y+z)>x and (x+z)<y:\n    print(\"-\")\n\n\n    \n    ", "a = int(input())\nfor x in range(a):\n    b,c = map(int,input().split())\n    r = [ y+1 for y in range(c)]\n    d = []\n    h = 1\n    t = 0\n    for x in range(b):\n        if t == 0:\n\n            d.append(h)\n            h += 1\n\n            if h > c:\n                h = c-1\n                t = -1\n\n        else:\n            d.append(h)\n            h -= 1\n\n            if h <= 0:\n                h = 1\n                t = 0\n\n    n = {}\n    for y in d:\n        if n.get(y) == None:\n            n[y] = 1\n        else:\n            n[y] += 1\n\n    p = c\n    for y in n:\n        if n[y] > 1:\n            p = y-1\n            break\n\n    z = r[p:]\n    z.sort(reverse=True)\n    ss = (r[:p]+z)\n    print(*ss)\n\n"], "sc_cc": [11.0, 11.0], "transformed_mc": ["\ndef determine_vote_result(x, y, z):\n    if (x+z) == y and (z+y) == x:\n        return \"0\"\n    elif (x+z) >= y and (z+y) >= x:\n        return \"?\"\n    elif x > y or (x+z) > y and (y+z) < x:\n        return \"+\"\n    elif y > x or (y+z) > x and (x+z) < y:\n        return \"-\"\n\ndef main():\n    x, y, z = map(int, input().split())\n    result = determine_vote_result(x, y, z)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "def build_sequence(n, k):\n    d = []\n    h = 1\n    t = 0\n    for _ in range(n):\n        if t == 0:\n            d.append(h)\n            h += 1\n            if h > k:\n                h = k - 1\n                t = -1\n        else:\n            d.append(h)\n            h -= 1\n            if h <= 0:\n                h = 1\n                t = 0\n    return d\n\ndef count_frequency(sequence):\n    freq_map = {}\n    for num in sequence:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n    return freq_map\n\ndef find_p_value(freq_map):\n    p = max(freq_map.keys())\n    for num, freq in freq_map.items():\n        if freq > 1:\n            p = num - 1\n            break\n    return p\n\ndef sort_and_combine(r, p, k):\n    z = r[p:]\n    z.sort(reverse=True)\n    result = r[:p] + z\n    return result\n\ndef find_permutation(n, k):\n    r = [y + 1 for y in range(k)]\n    sequence = build_sequence(n, k)\n    freq_map = count_frequency(sequence)\n    p = find_p_value(freq_map)\n    result = sort_and_combine(r, p, k)\n    return result\n\ndef main():\n    test_cases = int(input())\n    for _ in range(test_cases):\n        n, k = map(int, input().split())\n        result = find_permutation(n, k)\n        print(*result)\n\nif __name__ == '__main__':\n    main()"]}
